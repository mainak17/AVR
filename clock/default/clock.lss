
clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000290  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000027  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000033c  00000000  00000000  0000032b  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000012a  00000000  00000000  00000667  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000035e  00000000  00000000  00000791  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  00000af0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000c8  00000000  00000000  00000b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000258  00000000  00000000  00000be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000060  00000000  00000000  00000e40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	5b d0       	rcall	.+182    	; 0xea <main>
  34:	2b c1       	rjmp	.+598    	; 0x28c <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <display>:
		
	
}//main

void display(int i,int j)
{	
  38:	9c 01       	movw	r18, r24
	
	 if(j==1)
  3a:	61 30       	cpi	r22, 0x01	; 1
  3c:	71 05       	cpc	r23, r1
  3e:	19 f4       	brne	.+6      	; 0x46 <__SREG__+0x7>
	 {
	 	PORTC=0x01;
  40:	81 e0       	ldi	r24, 0x01	; 1
  42:	85 bb       	out	0x15, r24	; 21
  44:	10 c0       	rjmp	.+32     	; 0x66 <__SREG__+0x27>
	 }
	 if(j==2)
  46:	62 30       	cpi	r22, 0x02	; 2
  48:	71 05       	cpc	r23, r1
  4a:	19 f4       	brne	.+6      	; 0x52 <__SREG__+0x13>
	 {
	 	PORTC=0x02;
  4c:	82 e0       	ldi	r24, 0x02	; 2
  4e:	85 bb       	out	0x15, r24	; 21
  50:	0f c0       	rjmp	.+30     	; 0x70 <__SREG__+0x31>
	 }
	 if(j==3)
  52:	63 30       	cpi	r22, 0x03	; 3
  54:	71 05       	cpc	r23, r1
  56:	11 f4       	brne	.+4      	; 0x5c <__SREG__+0x1d>
	 {
	 	PORTC=0x04;
  58:	84 e0       	ldi	r24, 0x04	; 4
  5a:	0e c0       	rjmp	.+28     	; 0x78 <__SREG__+0x39>
	 }
	 if(j==4)
  5c:	64 30       	cpi	r22, 0x04	; 4
  5e:	71 05       	cpc	r23, r1
  60:	11 f4       	brne	.+4      	; 0x66 <__SREG__+0x27>
	 {
	 	PORTC=0x08;
  62:	88 e0       	ldi	r24, 0x08	; 8
  64:	09 c0       	rjmp	.+18     	; 0x78 <__SREG__+0x39>
	 }
	 if(j==5)
  66:	65 30       	cpi	r22, 0x05	; 5
  68:	71 05       	cpc	r23, r1
  6a:	11 f4       	brne	.+4      	; 0x70 <__SREG__+0x31>
	 {
	 	PORTC=0x10;
  6c:	80 e1       	ldi	r24, 0x10	; 16
  6e:	04 c0       	rjmp	.+8      	; 0x78 <__SREG__+0x39>
	 }
	 if(j==6)
  70:	66 30       	cpi	r22, 0x06	; 6
  72:	71 05       	cpc	r23, r1
  74:	11 f4       	brne	.+4      	; 0x7a <__SREG__+0x3b>
	 {
	 	PORTC=0x20;
  76:	80 e2       	ldi	r24, 0x20	; 32
  78:	85 bb       	out	0x15, r24	; 21
	 }

	 
	if(i==1)     
  7a:	21 30       	cpi	r18, 0x01	; 1
  7c:	31 05       	cpc	r19, r1
  7e:	19 f4       	brne	.+6      	; 0x86 <__SREG__+0x47>
	PORTD=~(0x06);				
  80:	89 ef       	ldi	r24, 0xF9	; 249
  82:	82 bb       	out	0x12, r24	; 18
  84:	12 c0       	rjmp	.+36     	; 0xaa <__SREG__+0x6b>
	if(i==2)
  86:	22 30       	cpi	r18, 0x02	; 2
  88:	31 05       	cpc	r19, r1
  8a:	19 f4       	brne	.+6      	; 0x92 <__SREG__+0x53>
	PORTD=~(0x5b);
  8c:	84 ea       	ldi	r24, 0xA4	; 164
  8e:	82 bb       	out	0x12, r24	; 18
  90:	12 c0       	rjmp	.+36     	; 0xb6 <__SREG__+0x77>
	if(i==3)
  92:	23 30       	cpi	r18, 0x03	; 3
  94:	31 05       	cpc	r19, r1
  96:	19 f4       	brne	.+6      	; 0x9e <__SREG__+0x5f>
	PORTD=~(0x4f);
  98:	80 eb       	ldi	r24, 0xB0	; 176
  9a:	82 bb       	out	0x12, r24	; 18
  9c:	11 c0       	rjmp	.+34     	; 0xc0 <__SREG__+0x81>
	if(i==4)
  9e:	24 30       	cpi	r18, 0x04	; 4
  a0:	31 05       	cpc	r19, r1
  a2:	19 f4       	brne	.+6      	; 0xaa <__SREG__+0x6b>
	PORTD=~(0x66);
  a4:	89 e9       	ldi	r24, 0x99	; 153
  a6:	82 bb       	out	0x12, r24	; 18
  a8:	10 c0       	rjmp	.+32     	; 0xca <__SREG__+0x8b>
	if(i==5)
  aa:	25 30       	cpi	r18, 0x05	; 5
  ac:	31 05       	cpc	r19, r1
  ae:	19 f4       	brne	.+6      	; 0xb6 <__SREG__+0x77>
	PORTD=~(0x6d);
  b0:	82 e9       	ldi	r24, 0x92	; 146
  b2:	82 bb       	out	0x12, r24	; 18
  b4:	0f c0       	rjmp	.+30     	; 0xd4 <__SREG__+0x95>
	if(i==6)
  b6:	26 30       	cpi	r18, 0x06	; 6
  b8:	31 05       	cpc	r19, r1
  ba:	11 f4       	brne	.+4      	; 0xc0 <__SREG__+0x81>
	PORTD=~(0x7d);
  bc:	82 e8       	ldi	r24, 0x82	; 130
  be:	0e c0       	rjmp	.+28     	; 0xdc <__SREG__+0x9d>
	if(i==7)
  c0:	27 30       	cpi	r18, 0x07	; 7
  c2:	31 05       	cpc	r19, r1
  c4:	11 f4       	brne	.+4      	; 0xca <__SREG__+0x8b>
	PORTD=~(0x07);
  c6:	88 ef       	ldi	r24, 0xF8	; 248
  c8:	09 c0       	rjmp	.+18     	; 0xdc <__SREG__+0x9d>
	if(i==8)
  ca:	28 30       	cpi	r18, 0x08	; 8
  cc:	31 05       	cpc	r19, r1
  ce:	11 f4       	brne	.+4      	; 0xd4 <__SREG__+0x95>
	PORTD=~(0x7f);
  d0:	80 e8       	ldi	r24, 0x80	; 128
  d2:	04 c0       	rjmp	.+8      	; 0xdc <__SREG__+0x9d>
	if(i==9)
  d4:	29 30       	cpi	r18, 0x09	; 9
  d6:	31 05       	cpc	r19, r1
  d8:	19 f4       	brne	.+6      	; 0xe0 <__SREG__+0xa1>
	PORTD=~(0x6f);
  da:	80 e9       	ldi	r24, 0x90	; 144
  dc:	82 bb       	out	0x12, r24	; 18
  de:	08 95       	ret
	if(i==0)
  e0:	23 2b       	or	r18, r19
  e2:	11 f4       	brne	.+4      	; 0xe8 <__SREG__+0xa9>
	PORTD=~(0x3f); 
  e4:	80 ec       	ldi	r24, 0xC0	; 192
  e6:	82 bb       	out	0x12, r24	; 18
  e8:	08 95       	ret

000000ea <main>:
#include <avr/io.h>
#include <util/delay.h>


void main()
{   
  ea:	2f 92       	push	r2
  ec:	3f 92       	push	r3
  ee:	4f 92       	push	r4
  f0:	5f 92       	push	r5
  f2:	6f 92       	push	r6
  f4:	7f 92       	push	r7
  f6:	8f 92       	push	r8
  f8:	9f 92       	push	r9
  fa:	af 92       	push	r10
  fc:	bf 92       	push	r11
  fe:	cf 92       	push	r12
 100:	df 92       	push	r13
 102:	ef 92       	push	r14
 104:	ff 92       	push	r15
 106:	0f 93       	push	r16
 108:	1f 93       	push	r17
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
int i=1,c=0;
int min=0;
int sec=0;
int k=0;

	DDRD=0xFF;
 10e:	8f ef       	ldi	r24, 0xFF	; 255
 110:	81 bb       	out	0x11, r24	; 17
	DDRC=0xFF;
 112:	84 bb       	out	0x14, r24	; 20
	DDRB=0x0F;
 114:	8f e0       	ldi	r24, 0x0F	; 15
 116:	87 bb       	out	0x17, r24	; 23
 118:	21 e0       	ldi	r18, 0x01	; 1
 11a:	82 2e       	mov	r8, r18
 11c:	91 2c       	mov	r9, r1
 11e:	aa 24       	eor	r10, r10
 120:	bb 24       	eor	r11, r11
 122:	cc 24       	eor	r12, r12
 124:	dd 24       	eor	r13, r13
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 126:	90 ea       	ldi	r25, 0xA0	; 160
 128:	69 2e       	mov	r6, r25
 12a:	9f e0       	ldi	r25, 0x0F	; 15
 12c:	79 2e       	mov	r7, r25
	while(1)
	{	
		if((PINB&0x20)==0x00)
 12e:	b5 99       	sbic	0x16, 5	; 22
 130:	04 c0       	rjmp	.+8      	; 0x13a <main+0x50>
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	a8 2e       	mov	r10, r24
 136:	b1 2c       	mov	r11, r1
 138:	04 c0       	rjmp	.+8      	; 0x142 <main+0x58>
			{
			c=1;	
			}
		if(c==1)
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	a8 16       	cp	r10, r24
 13e:	b1 04       	cpc	r11, r1
 140:	e1 f4       	brne	.+56     	; 0x17a <main+0x90>
		{
		            display(k,5);
 142:	c6 01       	movw	r24, r12
 144:	65 e0       	ldi	r22, 0x05	; 5
 146:	70 e0       	ldi	r23, 0x00	; 0
 148:	77 df       	rcall	.-274    	; 0x38 <display>
 14a:	c3 01       	movw	r24, r6
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <main+0x62>
					_delay_ms(1);
					display(0,6);
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	66 e0       	ldi	r22, 0x06	; 6
 156:	70 e0       	ldi	r23, 0x00	; 0
 158:	6f df       	rcall	.-290    	; 0x38 <display>
 15a:	c3 01       	movw	r24, r6
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <main+0x72>
					_delay_ms(1);

			if((PINB&0x20)==0x00)
 160:	b5 99       	sbic	0x16, 5	; 22
 162:	0b c0       	rjmp	.+22     	; 0x17a <main+0x90>
 164:	88 eb       	ldi	r24, 0xB8	; 184
 166:	9b e0       	ldi	r25, 0x0B	; 11
 168:	e0 e9       	ldi	r30, 0x90	; 144
 16a:	f1 e0       	ldi	r31, 0x01	; 1
 16c:	31 97       	sbiw	r30, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <main+0x82>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 170:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 172:	d1 f7       	brne	.-12     	; 0x168 <main+0x7e>
			{
			_delay_ms(300);
			 k++;	
 174:	08 94       	sec
 176:	c1 1c       	adc	r12, r1
 178:	d1 1c       	adc	r13, r1
			}
          
		}

		if((PINB&0x10)==0x00)
 17a:	b4 99       	sbic	0x16, 4	; 22
 17c:	0d c0       	rjmp	.+26     	; 0x198 <main+0xae>
 17e:	88 eb       	ldi	r24, 0xB8	; 184
 180:	9b e0       	ldi	r25, 0x0B	; 11
 182:	e0 e9       	ldi	r30, 0x90	; 144
 184:	f1 e0       	ldi	r31, 0x01	; 1
 186:	31 97       	sbiw	r30, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <main+0x9c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 18a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 18c:	d1 f7       	brne	.-12     	; 0x182 <main+0x98>
			{
			_delay_ms(300);	 
			i++;
 18e:	08 94       	sec
 190:	81 1c       	adc	r8, r1
 192:	91 1c       	adc	r9, r1
 194:	aa 24       	eor	r10, r10
 196:	bb 24       	eor	r11, r11
			c=0;
			}			

if(i%2==0)
 198:	80 fc       	sbrc	r8, 0
 19a:	c9 cf       	rjmp	.-110    	; 0x12e <main+0x44>
 19c:	c0 e0       	ldi	r28, 0x00	; 0
 19e:	d0 e0       	ldi	r29, 0x00	; 0
 1a0:	41 c0       	rjmp	.+130    	; 0x224 <main+0x13a>
			for(sec=0;sec<=9;sec++)
	 			{
			
			for(int y=0;y<250;y++)
				 {
					display(min%10,3);
 1a2:	c1 01       	movw	r24, r2
 1a4:	63 e0       	ldi	r22, 0x03	; 3
 1a6:	70 e0       	ldi	r23, 0x00	; 0
 1a8:	47 df       	rcall	.-370    	; 0x38 <display>
 1aa:	c3 01       	movw	r24, r6
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <main+0xc2>
					_delay_ms(1);
					display(min/10,4);
 1b0:	c2 01       	movw	r24, r4
 1b2:	64 e0       	ldi	r22, 0x04	; 4
 1b4:	70 e0       	ldi	r23, 0x00	; 0
 1b6:	40 df       	rcall	.-384    	; 0x38 <display>
 1b8:	c3 01       	movw	r24, r6
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <main+0xd0>
					_delay_ms(1);
					
					display(sec,1);
 1be:	c8 01       	movw	r24, r16
 1c0:	61 e0       	ldi	r22, 0x01	; 1
 1c2:	70 e0       	ldi	r23, 0x00	; 0
 1c4:	39 df       	rcall	.-398    	; 0x38 <display>
 1c6:	c3 01       	movw	r24, r6
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <main+0xde>
					_delay_ms(1);
					display(0,2);
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	62 e0       	ldi	r22, 0x02	; 2
 1d2:	70 e0       	ldi	r23, 0x00	; 0
 1d4:	31 df       	rcall	.-414    	; 0x38 <display>
 1d6:	c3 01       	movw	r24, r6
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <main+0xee>
					_delay_ms(1);

					if((min==k)&&(sec==0))
 1dc:	cc 15       	cp	r28, r12
 1de:	dd 05       	cpc	r29, r13
 1e0:	31 f4       	brne	.+12     	; 0x1ee <main+0x104>
 1e2:	01 15       	cp	r16, r1
 1e4:	11 05       	cpc	r17, r1
 1e6:	51 f4       	brne	.+20     	; 0x1fc <main+0x112>
					{
					PORTB=0x02;
 1e8:	82 e0       	ldi	r24, 0x02	; 2
 1ea:	88 bb       	out	0x18, r24	; 24
 1ec:	07 c0       	rjmp	.+14     	; 0x1fc <main+0x112>
					}//if check 1
				if((min>k)&&(sec==0))
 1ee:	cc 16       	cp	r12, r28
 1f0:	dd 06       	cpc	r13, r29
 1f2:	24 f4       	brge	.+8      	; 0x1fc <main+0x112>
 1f4:	01 15       	cp	r16, r1
 1f6:	11 05       	cpc	r17, r1
 1f8:	09 f4       	brne	.+2      	; 0x1fc <main+0x112>
					{
					PORTB=0x00;
 1fa:	18 ba       	out	0x18, r1	; 24
			{
				
			for(sec=0;sec<=9;sec++)
	 			{
			
			for(int y=0;y<250;y++)
 1fc:	08 94       	sec
 1fe:	e1 1c       	adc	r14, r1
 200:	f1 1c       	adc	r15, r1
 202:	8a ef       	ldi	r24, 0xFA	; 250
 204:	e8 16       	cp	r14, r24
 206:	f1 04       	cpc	r15, r1
 208:	61 f6       	brne	.-104    	; 0x1a2 <main+0xb8>

if(i%2==0)
	{	for(min=0;min<=10;min++)
			{
				
			for(sec=0;sec<=9;sec++)
 20a:	0f 5f       	subi	r16, 0xFF	; 255
 20c:	1f 4f       	sbci	r17, 0xFF	; 255
 20e:	0a 30       	cpi	r16, 0x0A	; 10
 210:	11 05       	cpc	r17, r1
 212:	19 f0       	breq	.+6      	; 0x21a <main+0x130>
 214:	ee 24       	eor	r14, r14
 216:	ff 24       	eor	r15, r15
 218:	c4 cf       	rjmp	.-120    	; 0x1a2 <main+0xb8>
			i++;
			c=0;
			}			

if(i%2==0)
	{	for(min=0;min<=10;min++)
 21a:	21 96       	adiw	r28, 0x01	; 1
 21c:	cb 30       	cpi	r28, 0x0B	; 11
 21e:	d1 05       	cpc	r29, r1
 220:	09 f4       	brne	.+2      	; 0x224 <main+0x13a>
 222:	85 cf       	rjmp	.-246    	; 0x12e <main+0x44>
			for(sec=0;sec<=9;sec++)
	 			{
			
			for(int y=0;y<250;y++)
				 {
					display(min%10,3);
 224:	ce 01       	movw	r24, r28
 226:	6a e0       	ldi	r22, 0x0A	; 10
 228:	70 e0       	ldi	r23, 0x00	; 0
 22a:	09 d0       	rcall	.+18     	; 0x23e <__divmodhi4>
 22c:	1c 01       	movw	r2, r24
					_delay_ms(1);
					display(min/10,4);
 22e:	ce 01       	movw	r24, r28
 230:	6a e0       	ldi	r22, 0x0A	; 10
 232:	70 e0       	ldi	r23, 0x00	; 0
 234:	04 d0       	rcall	.+8      	; 0x23e <__divmodhi4>
 236:	2b 01       	movw	r4, r22
 238:	00 e0       	ldi	r16, 0x00	; 0
 23a:	10 e0       	ldi	r17, 0x00	; 0
 23c:	eb cf       	rjmp	.-42     	; 0x214 <main+0x12a>

0000023e <__divmodhi4>:
 23e:	97 fb       	bst	r25, 7
 240:	09 2e       	mov	r0, r25
 242:	07 26       	eor	r0, r23
 244:	0a d0       	rcall	.+20     	; 0x25a <__divmodhi4_neg1>
 246:	77 fd       	sbrc	r23, 7
 248:	04 d0       	rcall	.+8      	; 0x252 <__divmodhi4_neg2>
 24a:	0c d0       	rcall	.+24     	; 0x264 <__udivmodhi4>
 24c:	06 d0       	rcall	.+12     	; 0x25a <__divmodhi4_neg1>
 24e:	00 20       	and	r0, r0
 250:	1a f4       	brpl	.+6      	; 0x258 <__divmodhi4_exit>

00000252 <__divmodhi4_neg2>:
 252:	70 95       	com	r23
 254:	61 95       	neg	r22
 256:	7f 4f       	sbci	r23, 0xFF	; 255

00000258 <__divmodhi4_exit>:
 258:	08 95       	ret

0000025a <__divmodhi4_neg1>:
 25a:	f6 f7       	brtc	.-4      	; 0x258 <__divmodhi4_exit>
 25c:	90 95       	com	r25
 25e:	81 95       	neg	r24
 260:	9f 4f       	sbci	r25, 0xFF	; 255
 262:	08 95       	ret

00000264 <__udivmodhi4>:
 264:	aa 1b       	sub	r26, r26
 266:	bb 1b       	sub	r27, r27
 268:	51 e1       	ldi	r21, 0x11	; 17
 26a:	07 c0       	rjmp	.+14     	; 0x27a <__udivmodhi4_ep>

0000026c <__udivmodhi4_loop>:
 26c:	aa 1f       	adc	r26, r26
 26e:	bb 1f       	adc	r27, r27
 270:	a6 17       	cp	r26, r22
 272:	b7 07       	cpc	r27, r23
 274:	10 f0       	brcs	.+4      	; 0x27a <__udivmodhi4_ep>
 276:	a6 1b       	sub	r26, r22
 278:	b7 0b       	sbc	r27, r23

0000027a <__udivmodhi4_ep>:
 27a:	88 1f       	adc	r24, r24
 27c:	99 1f       	adc	r25, r25
 27e:	5a 95       	dec	r21
 280:	a9 f7       	brne	.-22     	; 0x26c <__udivmodhi4_loop>
 282:	80 95       	com	r24
 284:	90 95       	com	r25
 286:	bc 01       	movw	r22, r24
 288:	cd 01       	movw	r24, r26
 28a:	08 95       	ret

0000028c <_exit>:
 28c:	f8 94       	cli

0000028e <__stop_program>:
 28e:	ff cf       	rjmp	.-2      	; 0x28e <__stop_program>
