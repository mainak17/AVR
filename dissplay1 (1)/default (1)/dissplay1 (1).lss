
dissplay1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000136  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000027  00000000  00000000  00000156  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000148  00000000  00000000  0000017d  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000ec  00000000  00000000  000002c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001db  00000000  00000000  000003b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  0000058c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000cc  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000d8  00000000  00000000  00000688  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000760  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	3b d0       	rcall	.+118    	; 0xaa <main>
  34:	54 c0       	rjmp	.+168    	; 0xde <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <display>:
		
	
}

void display(int i)
{
  38:	9c 01       	movw	r18, r24
	if(i==1)     
  3a:	81 30       	cpi	r24, 0x01	; 1
  3c:	91 05       	cpc	r25, r1
  3e:	19 f4       	brne	.+6      	; 0x46 <__SREG__+0x7>
	PORTD=~(0x06);				
  40:	89 ef       	ldi	r24, 0xF9	; 249
  42:	82 bb       	out	0x12, r24	; 18
  44:	12 c0       	rjmp	.+36     	; 0x6a <__SREG__+0x2b>
	if(i==2)
  46:	82 30       	cpi	r24, 0x02	; 2
  48:	91 05       	cpc	r25, r1
  4a:	19 f4       	brne	.+6      	; 0x52 <__SREG__+0x13>
	PORTD=~(0x5b);
  4c:	84 ea       	ldi	r24, 0xA4	; 164
  4e:	82 bb       	out	0x12, r24	; 18
  50:	12 c0       	rjmp	.+36     	; 0x76 <__SREG__+0x37>
	if(i==3)
  52:	83 30       	cpi	r24, 0x03	; 3
  54:	91 05       	cpc	r25, r1
  56:	19 f4       	brne	.+6      	; 0x5e <__SREG__+0x1f>
	PORTD=~(0x4f);
  58:	80 eb       	ldi	r24, 0xB0	; 176
  5a:	82 bb       	out	0x12, r24	; 18
  5c:	11 c0       	rjmp	.+34     	; 0x80 <__SREG__+0x41>
	if(i==4)
  5e:	84 30       	cpi	r24, 0x04	; 4
  60:	91 05       	cpc	r25, r1
  62:	19 f4       	brne	.+6      	; 0x6a <__SREG__+0x2b>
	PORTD=~(0x66);
  64:	89 e9       	ldi	r24, 0x99	; 153
  66:	82 bb       	out	0x12, r24	; 18
  68:	10 c0       	rjmp	.+32     	; 0x8a <__SREG__+0x4b>
	if(i==5)
  6a:	25 30       	cpi	r18, 0x05	; 5
  6c:	31 05       	cpc	r19, r1
  6e:	19 f4       	brne	.+6      	; 0x76 <__SREG__+0x37>
	PORTD=~(0x6d);
  70:	82 e9       	ldi	r24, 0x92	; 146
  72:	82 bb       	out	0x12, r24	; 18
  74:	0f c0       	rjmp	.+30     	; 0x94 <__SREG__+0x55>
	if(i==6)
  76:	26 30       	cpi	r18, 0x06	; 6
  78:	31 05       	cpc	r19, r1
  7a:	11 f4       	brne	.+4      	; 0x80 <__SREG__+0x41>
	PORTD=~(0x7d);
  7c:	82 e8       	ldi	r24, 0x82	; 130
  7e:	0e c0       	rjmp	.+28     	; 0x9c <__SREG__+0x5d>
	if(i==7)
  80:	27 30       	cpi	r18, 0x07	; 7
  82:	31 05       	cpc	r19, r1
  84:	11 f4       	brne	.+4      	; 0x8a <__SREG__+0x4b>
	PORTD=~(0x07);
  86:	88 ef       	ldi	r24, 0xF8	; 248
  88:	09 c0       	rjmp	.+18     	; 0x9c <__SREG__+0x5d>
	if(i==8)
  8a:	28 30       	cpi	r18, 0x08	; 8
  8c:	31 05       	cpc	r19, r1
  8e:	11 f4       	brne	.+4      	; 0x94 <__SREG__+0x55>
	PORTD=~(0x7f);
  90:	80 e8       	ldi	r24, 0x80	; 128
  92:	04 c0       	rjmp	.+8      	; 0x9c <__SREG__+0x5d>
	if(i==9)
  94:	29 30       	cpi	r18, 0x09	; 9
  96:	31 05       	cpc	r19, r1
  98:	19 f4       	brne	.+6      	; 0xa0 <__SREG__+0x61>
	PORTD=~(0x6f);
  9a:	80 e9       	ldi	r24, 0x90	; 144
  9c:	82 bb       	out	0x12, r24	; 18
  9e:	08 95       	ret
	if(i==0)
  a0:	23 2b       	or	r18, r19
  a2:	11 f4       	brne	.+4      	; 0xa8 <__SREG__+0x69>
	PORTD=~(0x3f); 
  a4:	80 ec       	ldi	r24, 0xC0	; 192
  a6:	82 bb       	out	0x12, r24	; 18
  a8:	08 95       	ret

000000aa <main>:

#define F_CPU 16000000ul
#include <avr/io.h>
#include <util/delay.h>
 void main()
{
  aa:	0f 93       	push	r16
  ac:	1f 93       	push	r17
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
	 //char i;
	DDRD=0XFF;
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	81 bb       	out	0x11, r24	; 17
  b6:	c0 e0       	ldi	r28, 0x00	; 0
  b8:	d0 e0       	ldi	r29, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ba:	00 e9       	ldi	r16, 0x90	; 144
  bc:	11 e0       	ldi	r17, 0x01	; 1
	while(1)
	{
	 for(int i=0;i<10;i++)
	 {
	 display(i);
  be:	ce 01       	movw	r24, r28
  c0:	bb df       	rcall	.-138    	; 0x38 <display>
  c2:	80 e7       	ldi	r24, 0x70	; 112
  c4:	97 e1       	ldi	r25, 0x17	; 23
  c6:	f8 01       	movw	r30, r16
  c8:	31 97       	sbiw	r30, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <main+0x1e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  cc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ce:	d9 f7       	brne	.-10     	; 0xc6 <main+0x1c>
{
	 //char i;
	DDRD=0XFF;
	while(1)
	{
	 for(int i=0;i<10;i++)
  d0:	21 96       	adiw	r28, 0x01	; 1
  d2:	ca 30       	cpi	r28, 0x0A	; 10
  d4:	d1 05       	cpc	r29, r1
  d6:	9c f3       	brlt	.-26     	; 0xbe <main+0x14>
  d8:	c0 e0       	ldi	r28, 0x00	; 0
  da:	d0 e0       	ldi	r29, 0x00	; 0
  dc:	f0 cf       	rjmp	.-32     	; 0xbe <main+0x14>

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>
