
display2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000020a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000025e  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000035  00000000  00000000  0000027e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000202  00000000  00000000  000002b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000010a  00000000  00000000  000004b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000002fa  00000000  00000000  000005bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  000008bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000df  00000000  00000000  000008fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000001e0  00000000  00000000  000009db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000c0  00000000  00000000  00000bbb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	78 d0       	rcall	.+240    	; 0x124 <main>
  34:	e8 c0       	rjmp	.+464    	; 0x206 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <display1>:
		
	
}//main

void display1(int i)
{	
  38:	9c 01       	movw	r18, r24
	
	 PORTC|=0x01;
  3a:	a8 9a       	sbi	0x15, 0	; 21
	 PORTC&=0b11111101;
  3c:	a9 98       	cbi	0x15, 1	; 21
	if(i==1)     
  3e:	81 30       	cpi	r24, 0x01	; 1
  40:	91 05       	cpc	r25, r1
  42:	19 f4       	brne	.+6      	; 0x4a <__SREG__+0xb>
	PORTD=~(0x06);				
  44:	89 ef       	ldi	r24, 0xF9	; 249
  46:	82 bb       	out	0x12, r24	; 18
  48:	12 c0       	rjmp	.+36     	; 0x6e <__SREG__+0x2f>
	if(i==2)
  4a:	82 30       	cpi	r24, 0x02	; 2
  4c:	91 05       	cpc	r25, r1
  4e:	19 f4       	brne	.+6      	; 0x56 <__SREG__+0x17>
	PORTD=~(0x5b);
  50:	84 ea       	ldi	r24, 0xA4	; 164
  52:	82 bb       	out	0x12, r24	; 18
  54:	12 c0       	rjmp	.+36     	; 0x7a <__SREG__+0x3b>
	if(i==3)
  56:	83 30       	cpi	r24, 0x03	; 3
  58:	91 05       	cpc	r25, r1
  5a:	19 f4       	brne	.+6      	; 0x62 <__SREG__+0x23>
	PORTD=~(0x4f);
  5c:	80 eb       	ldi	r24, 0xB0	; 176
  5e:	82 bb       	out	0x12, r24	; 18
  60:	11 c0       	rjmp	.+34     	; 0x84 <__SREG__+0x45>
	if(i==4)
  62:	84 30       	cpi	r24, 0x04	; 4
  64:	91 05       	cpc	r25, r1
  66:	19 f4       	brne	.+6      	; 0x6e <__SREG__+0x2f>
	PORTD=~(0x66);
  68:	89 e9       	ldi	r24, 0x99	; 153
  6a:	82 bb       	out	0x12, r24	; 18
  6c:	10 c0       	rjmp	.+32     	; 0x8e <__SREG__+0x4f>
	if(i==5)
  6e:	25 30       	cpi	r18, 0x05	; 5
  70:	31 05       	cpc	r19, r1
  72:	19 f4       	brne	.+6      	; 0x7a <__SREG__+0x3b>
	PORTD=~(0x6d);
  74:	82 e9       	ldi	r24, 0x92	; 146
  76:	82 bb       	out	0x12, r24	; 18
  78:	0f c0       	rjmp	.+30     	; 0x98 <__SREG__+0x59>
	if(i==6)
  7a:	26 30       	cpi	r18, 0x06	; 6
  7c:	31 05       	cpc	r19, r1
  7e:	11 f4       	brne	.+4      	; 0x84 <__SREG__+0x45>
	PORTD=~(0x7d);
  80:	82 e8       	ldi	r24, 0x82	; 130
  82:	0e c0       	rjmp	.+28     	; 0xa0 <__SREG__+0x61>
	if(i==7)
  84:	27 30       	cpi	r18, 0x07	; 7
  86:	31 05       	cpc	r19, r1
  88:	11 f4       	brne	.+4      	; 0x8e <__SREG__+0x4f>
	PORTD=~(0x07);
  8a:	88 ef       	ldi	r24, 0xF8	; 248
  8c:	09 c0       	rjmp	.+18     	; 0xa0 <__SREG__+0x61>
	if(i==8)
  8e:	28 30       	cpi	r18, 0x08	; 8
  90:	31 05       	cpc	r19, r1
  92:	11 f4       	brne	.+4      	; 0x98 <__SREG__+0x59>
	PORTD=~(0x7f);
  94:	80 e8       	ldi	r24, 0x80	; 128
  96:	04 c0       	rjmp	.+8      	; 0xa0 <__SREG__+0x61>
	if(i==9)
  98:	29 30       	cpi	r18, 0x09	; 9
  9a:	31 05       	cpc	r19, r1
  9c:	19 f4       	brne	.+6      	; 0xa4 <__SREG__+0x65>
	PORTD=~(0x6f);
  9e:	80 e9       	ldi	r24, 0x90	; 144
  a0:	82 bb       	out	0x12, r24	; 18
  a2:	08 95       	ret
	if(i==0)
  a4:	23 2b       	or	r18, r19
  a6:	11 f4       	brne	.+4      	; 0xac <__SREG__+0x6d>
	PORTD=~(0x3f); 
  a8:	80 ec       	ldi	r24, 0xC0	; 192
  aa:	82 bb       	out	0x12, r24	; 18
  ac:	08 95       	ret

000000ae <display2>:

}

void display2(int i)
{
  ae:	9c 01       	movw	r18, r24
	PORTC|=0x02;
  b0:	a9 9a       	sbi	0x15, 1	; 21
	PORTC&=0b11111110;
  b2:	a8 98       	cbi	0x15, 0	; 21
	if(i==1)     
  b4:	81 30       	cpi	r24, 0x01	; 1
  b6:	91 05       	cpc	r25, r1
  b8:	19 f4       	brne	.+6      	; 0xc0 <display2+0x12>
	PORTD=~(0x06);				
  ba:	89 ef       	ldi	r24, 0xF9	; 249
  bc:	82 bb       	out	0x12, r24	; 18
  be:	12 c0       	rjmp	.+36     	; 0xe4 <display2+0x36>
	if(i==2)
  c0:	82 30       	cpi	r24, 0x02	; 2
  c2:	91 05       	cpc	r25, r1
  c4:	19 f4       	brne	.+6      	; 0xcc <display2+0x1e>
	PORTD=~(0x5b);
  c6:	84 ea       	ldi	r24, 0xA4	; 164
  c8:	82 bb       	out	0x12, r24	; 18
  ca:	12 c0       	rjmp	.+36     	; 0xf0 <display2+0x42>
	if(i==3)
  cc:	83 30       	cpi	r24, 0x03	; 3
  ce:	91 05       	cpc	r25, r1
  d0:	19 f4       	brne	.+6      	; 0xd8 <display2+0x2a>
	PORTD=~(0x4f);
  d2:	80 eb       	ldi	r24, 0xB0	; 176
  d4:	82 bb       	out	0x12, r24	; 18
  d6:	11 c0       	rjmp	.+34     	; 0xfa <display2+0x4c>
	if(i==4)
  d8:	84 30       	cpi	r24, 0x04	; 4
  da:	91 05       	cpc	r25, r1
  dc:	19 f4       	brne	.+6      	; 0xe4 <display2+0x36>
	PORTD=~(0x66);
  de:	89 e9       	ldi	r24, 0x99	; 153
  e0:	82 bb       	out	0x12, r24	; 18
  e2:	10 c0       	rjmp	.+32     	; 0x104 <display2+0x56>
	if(i==5)
  e4:	25 30       	cpi	r18, 0x05	; 5
  e6:	31 05       	cpc	r19, r1
  e8:	19 f4       	brne	.+6      	; 0xf0 <display2+0x42>
	PORTD=~(0x6d);
  ea:	82 e9       	ldi	r24, 0x92	; 146
  ec:	82 bb       	out	0x12, r24	; 18
  ee:	0f c0       	rjmp	.+30     	; 0x10e <display2+0x60>
	if(i==6)
  f0:	26 30       	cpi	r18, 0x06	; 6
  f2:	31 05       	cpc	r19, r1
  f4:	11 f4       	brne	.+4      	; 0xfa <display2+0x4c>
	PORTD=~(0x7d);
  f6:	82 e8       	ldi	r24, 0x82	; 130
  f8:	0e c0       	rjmp	.+28     	; 0x116 <display2+0x68>
	if(i==7)
  fa:	27 30       	cpi	r18, 0x07	; 7
  fc:	31 05       	cpc	r19, r1
  fe:	11 f4       	brne	.+4      	; 0x104 <display2+0x56>
	PORTD=~(0x07);
 100:	88 ef       	ldi	r24, 0xF8	; 248
 102:	09 c0       	rjmp	.+18     	; 0x116 <display2+0x68>
	if(i==8)
 104:	28 30       	cpi	r18, 0x08	; 8
 106:	31 05       	cpc	r19, r1
 108:	11 f4       	brne	.+4      	; 0x10e <display2+0x60>
	PORTD=~(0x7f);
 10a:	80 e8       	ldi	r24, 0x80	; 128
 10c:	04 c0       	rjmp	.+8      	; 0x116 <display2+0x68>
	if(i==9)
 10e:	29 30       	cpi	r18, 0x09	; 9
 110:	31 05       	cpc	r19, r1
 112:	19 f4       	brne	.+6      	; 0x11a <display2+0x6c>
	PORTD=~(0x6f);
 114:	80 e9       	ldi	r24, 0x90	; 144
 116:	82 bb       	out	0x12, r24	; 18
 118:	08 95       	ret
	if(i==0)
 11a:	23 2b       	or	r18, r19
 11c:	11 f4       	brne	.+4      	; 0x122 <display2+0x74>
	PORTD=~(0x3f); 
 11e:	80 ec       	ldi	r24, 0xC0	; 192
 120:	82 bb       	out	0x12, r24	; 18
 122:	08 95       	ret

00000124 <main>:

#define F_CPU 16000000ul
#include <avr/io.h>
#include <util/delay.h>
 void main()
{
 124:	8f 92       	push	r8
 126:	9f 92       	push	r9
 128:	af 92       	push	r10
 12a:	bf 92       	push	r11
 12c:	cf 92       	push	r12
 12e:	df 92       	push	r13
 130:	ef 92       	push	r14
 132:	ff 92       	push	r15
 134:	0f 93       	push	r16
 136:	1f 93       	push	r17
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
	 
	DDRD=0XFF;
 13c:	8f ef       	ldi	r24, 0xFF	; 255
 13e:	81 bb       	out	0x11, r24	; 17
	DDRC=0x0F;
 140:	8f e0       	ldi	r24, 0x0F	; 15
 142:	84 bb       	out	0x14, r24	; 20
 144:	c0 e0       	ldi	r28, 0x00	; 0
 146:	d0 e0       	ldi	r29, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 148:	90 e9       	ldi	r25, 0x90	; 144
 14a:	89 2e       	mov	r8, r25
 14c:	91 e0       	ldi	r25, 0x01	; 1
 14e:	99 2e       	mov	r9, r25
	while(1)
	{
	 for(int i=0;i<30;i++)
	 {
		 if(i<=9)
 150:	80 ec       	ldi	r24, 0xC0	; 192
 152:	a8 2e       	mov	r10, r24
 154:	8d e5       	ldi	r24, 0x5D	; 93
 156:	b8 2e       	mov	r11, r24
 158:	29 c0       	rjmp	.+82     	; 0x1ac <main+0x88>
 15a:	ca 30       	cpi	r28, 0x0A	; 10
 15c:	d1 05       	cpc	r29, r1
 15e:	54 f4       	brge	.+20     	; 0x174 <main+0x50>
		 {
		 display1(i);
 160:	ce 01       	movw	r24, r28
 162:	6a df       	rcall	.-300    	; 0x38 <display1>
 164:	88 e8       	ldi	r24, 0x88	; 136
 166:	93 e1       	ldi	r25, 0x13	; 19
 168:	f4 01       	movw	r30, r8
 16a:	31 97       	sbiw	r30, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <main+0x46>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 16e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 170:	d9 f7       	brne	.-10     	; 0x168 <main+0x44>
 172:	1b c0       	rjmp	.+54     	; 0x1aa <main+0x86>

		 if(i>9)
		 {
		 for(int x=0;x<40;x++)
		 {
			int units=(i%10);
 174:	ce 01       	movw	r24, r28
 176:	6a e0       	ldi	r22, 0x0A	; 10
 178:	70 e0       	ldi	r23, 0x00	; 0
 17a:	1e d0       	rcall	.+60     	; 0x1b8 <__divmodhi4>
 17c:	6c 01       	movw	r12, r24
			int tens= (i/10);
 17e:	ce 01       	movw	r24, r28
 180:	6a e0       	ldi	r22, 0x0A	; 10
 182:	70 e0       	ldi	r23, 0x00	; 0
 184:	19 d0       	rcall	.+50     	; 0x1b8 <__divmodhi4>
 186:	7b 01       	movw	r14, r22
 188:	00 e0       	ldi	r16, 0x00	; 0
 18a:	10 e0       	ldi	r17, 0x00	; 0
			display1(units);
 18c:	c6 01       	movw	r24, r12
 18e:	54 df       	rcall	.-344    	; 0x38 <display1>
 190:	c5 01       	movw	r24, r10
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <main+0x6e>
			_delay_ms(6);
			display2(tens);
 196:	c7 01       	movw	r24, r14
 198:	8a df       	rcall	.-236    	; 0xae <display2>
 19a:	c5 01       	movw	r24, r10
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <main+0x78>
		 
		 }

		 if(i>9)
		 {
		 for(int x=0;x<40;x++)
 1a0:	0f 5f       	subi	r16, 0xFF	; 255
 1a2:	1f 4f       	sbci	r17, 0xFF	; 255
 1a4:	08 32       	cpi	r16, 0x28	; 40
 1a6:	11 05       	cpc	r17, r1
 1a8:	89 f7       	brne	.-30     	; 0x18c <main+0x68>
	 
	DDRD=0XFF;
	DDRC=0x0F;
	while(1)
	{
	 for(int i=0;i<30;i++)
 1aa:	21 96       	adiw	r28, 0x01	; 1
 1ac:	ce 31       	cpi	r28, 0x1E	; 30
 1ae:	d1 05       	cpc	r29, r1
 1b0:	a4 f2       	brlt	.-88     	; 0x15a <main+0x36>
 1b2:	c0 e0       	ldi	r28, 0x00	; 0
 1b4:	d0 e0       	ldi	r29, 0x00	; 0
 1b6:	d4 cf       	rjmp	.-88     	; 0x160 <main+0x3c>

000001b8 <__divmodhi4>:
 1b8:	97 fb       	bst	r25, 7
 1ba:	09 2e       	mov	r0, r25
 1bc:	07 26       	eor	r0, r23
 1be:	0a d0       	rcall	.+20     	; 0x1d4 <__divmodhi4_neg1>
 1c0:	77 fd       	sbrc	r23, 7
 1c2:	04 d0       	rcall	.+8      	; 0x1cc <__divmodhi4_neg2>
 1c4:	0c d0       	rcall	.+24     	; 0x1de <__udivmodhi4>
 1c6:	06 d0       	rcall	.+12     	; 0x1d4 <__divmodhi4_neg1>
 1c8:	00 20       	and	r0, r0
 1ca:	1a f4       	brpl	.+6      	; 0x1d2 <__divmodhi4_exit>

000001cc <__divmodhi4_neg2>:
 1cc:	70 95       	com	r23
 1ce:	61 95       	neg	r22
 1d0:	7f 4f       	sbci	r23, 0xFF	; 255

000001d2 <__divmodhi4_exit>:
 1d2:	08 95       	ret

000001d4 <__divmodhi4_neg1>:
 1d4:	f6 f7       	brtc	.-4      	; 0x1d2 <__divmodhi4_exit>
 1d6:	90 95       	com	r25
 1d8:	81 95       	neg	r24
 1da:	9f 4f       	sbci	r25, 0xFF	; 255
 1dc:	08 95       	ret

000001de <__udivmodhi4>:
 1de:	aa 1b       	sub	r26, r26
 1e0:	bb 1b       	sub	r27, r27
 1e2:	51 e1       	ldi	r21, 0x11	; 17
 1e4:	07 c0       	rjmp	.+14     	; 0x1f4 <__udivmodhi4_ep>

000001e6 <__udivmodhi4_loop>:
 1e6:	aa 1f       	adc	r26, r26
 1e8:	bb 1f       	adc	r27, r27
 1ea:	a6 17       	cp	r26, r22
 1ec:	b7 07       	cpc	r27, r23
 1ee:	10 f0       	brcs	.+4      	; 0x1f4 <__udivmodhi4_ep>
 1f0:	a6 1b       	sub	r26, r22
 1f2:	b7 0b       	sbc	r27, r23

000001f4 <__udivmodhi4_ep>:
 1f4:	88 1f       	adc	r24, r24
 1f6:	99 1f       	adc	r25, r25
 1f8:	5a 95       	dec	r21
 1fa:	a9 f7       	brne	.-22     	; 0x1e6 <__udivmodhi4_loop>
 1fc:	80 95       	com	r24
 1fe:	90 95       	com	r25
 200:	bc 01       	movw	r22, r24
 202:	cd 01       	movw	r24, r26
 204:	08 95       	ret

00000206 <_exit>:
 206:	f8 94       	cli

00000208 <__stop_program>:
 208:	ff cf       	rjmp	.-2      	; 0x208 <__stop_program>
