
lcd_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000300  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000300  00000394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080006c  0080006c  000003a0  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000c8  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003dd  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001b0  00000000  00000000  00000865  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000492  00000000  00000000  00000a15  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  00000ea8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000154  00000000  00000000  00000f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001a7  00000000  00000000  000010cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00001273  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e0 e0       	ldi	r30, 0x00	; 0
  3a:	f3 e0       	ldi	r31, 0x03	; 3
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	ac 36       	cpi	r26, 0x6C	; 108
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	ac e6       	ldi	r26, 0x6C	; 108
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	af 36       	cpi	r26, 0x6F	; 111
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	e2 d0       	rcall	.+452    	; 0x21e <main>
  5a:	50 c1       	rjmp	.+672    	; 0x2fc <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <delay_ns_lcd>:
delay_ns_lcd(200);  
PORTB&=~0x20;
}

void delay_ns_lcd(unsigned char tim)
{
  5e:	20 91 6c 00 	lds	r18, 0x006C
  62:	90 e0       	ldi	r25, 0x00	; 0
  64:	02 c0       	rjmp	.+4      	; 0x6a <delay_ns_lcd+0xc>
	for(j=0;j<tim;j++)
  66:	9f 5f       	subi	r25, 0xFF	; 255
  68:	2b e0       	ldi	r18, 0x0B	; 11
  6a:	98 17       	cp	r25, r24
  6c:	e0 f3       	brcs	.-8      	; 0x66 <delay_ns_lcd+0x8>
  6e:	20 93 6c 00 	sts	0x006C, r18
  72:	90 93 6d 00 	sts	0x006D, r25
	{
		for(k=0;k<11;k++)
		{};
	}
}
  76:	08 95       	ret

00000078 <latch>:

}

void latch(void)
{
PORTB&=~0x20;
  78:	c5 98       	cbi	0x18, 5	; 24
delay_ns_lcd(200);  
  7a:	88 ec       	ldi	r24, 0xC8	; 200
  7c:	f0 df       	rcall	.-32     	; 0x5e <delay_ns_lcd>
PORTB|=0x20;
  7e:	c5 9a       	sbi	0x18, 5	; 24
delay_ns_lcd(200);  
  80:	88 ec       	ldi	r24, 0xC8	; 200
  82:	ed df       	rcall	.-38     	; 0x5e <delay_ns_lcd>
PORTB&=~0x20;
  84:	c5 98       	cbi	0x18, 5	; 24
}
  86:	08 95       	ret

00000088 <lcd_cmd>:
		{};
	}
}

void lcd_cmd(unsigned char cmd)
{   unsigned char cmd_temp=cmd;
  88:	1f 93       	push	r17
  8a:	18 2f       	mov	r17, r24
	PORTB&=~0x30;
  8c:	88 b3       	in	r24, 0x18	; 24
  8e:	8f 7c       	andi	r24, 0xCF	; 207
  90:	88 bb       	out	0x18, r24	; 24
	cmd_temp>>=4;
	PORTB=((cmd_temp & 0x0F));			
  92:	81 2f       	mov	r24, r17
  94:	82 95       	swap	r24
  96:	8f 70       	andi	r24, 0x0F	; 15
  98:	88 bb       	out	0x18, r24	; 24
	latch();
  9a:	ee df       	rcall	.-36     	; 0x78 <latch>
	PORTB=(cmd & 0x0F);	
  9c:	1f 70       	andi	r17, 0x0F	; 15
  9e:	18 bb       	out	0x18, r17	; 24
	latch();
  a0:	eb df       	rcall	.-42     	; 0x78 <latch>
}
  a2:	1f 91       	pop	r17
  a4:	08 95       	ret

000000a6 <lcd_char>:


void lcd_char(unsigned char single)
{
  a6:	1f 93       	push	r17
  a8:	18 2f       	mov	r17, r24
    unsigned char temp_single=single;
	temp_single>>=4;
	PORTB=0x10;
  aa:	80 e1       	ldi	r24, 0x10	; 16
  ac:	88 bb       	out	0x18, r24	; 24
	PORTB=0x00;
  ae:	18 ba       	out	0x18, r1	; 24
	PORTB=(temp_single & 0x0F)|0x10;						
  b0:	81 2f       	mov	r24, r17
  b2:	82 95       	swap	r24
  b4:	8f 70       	andi	r24, 0x0F	; 15
  b6:	80 61       	ori	r24, 0x10	; 16
  b8:	88 bb       	out	0x18, r24	; 24
	latch();
  ba:	de df       	rcall	.-68     	; 0x78 <latch>
	PORTB=(single & 0x0F)|0x10;
  bc:	1f 70       	andi	r17, 0x0F	; 15
  be:	10 61       	ori	r17, 0x10	; 16
  c0:	18 bb       	out	0x18, r17	; 24
	latch();
  c2:	da df       	rcall	.-76     	; 0x78 <latch>
}
  c4:	1f 91       	pop	r17
  c6:	08 95       	ret

000000c8 <lcd_string>:

void lcd_string(unsigned char *str)
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	ec 01       	movw	r28, r24
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <lcd_string+0xc>
	unsigned char k=0;

		while(*str!='\0')	//Till null character is encountered
		{
			lcd_char(*str);
  d0:	ea df       	rcall	.-44     	; 0xa6 <lcd_char>
			str++;
  d2:	21 96       	adiw	r28, 0x01	; 1

void lcd_string(unsigned char *str)
{
	unsigned char k=0;

		while(*str!='\0')	//Till null character is encountered
  d4:	88 81       	ld	r24, Y
  d6:	88 23       	and	r24, r24
  d8:	d9 f7       	brne	.-10     	; 0xd0 <lcd_string+0x8>
		{
			lcd_char(*str);
			str++;
		}
}
  da:	df 91       	pop	r29
  dc:	cf 91       	pop	r28
  de:	08 95       	ret

000000e0 <lcd_showvalue>:



void lcd_showvalue(unsigned char num)	//prints the decimal 3digit value of num
{
  e0:	ef 92       	push	r14
  e2:	ff 92       	push	r15
  e4:	0f 93       	push	r16
  e6:	1f 93       	push	r17
  e8:	18 2f       	mov	r17, r24
	unsigned char H=0,T=0,O=0;
	H=num/100;
  ea:	64 e6       	ldi	r22, 0x64	; 100
  ec:	d4 d0       	rcall	.+424    	; 0x296 <__udivmodqi4>
  ee:	48 2f       	mov	r20, r24
	T=(num - (H*100))/10;
  f0:	28 2f       	mov	r18, r24
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	8c e9       	ldi	r24, 0x9C	; 156
  f6:	9f ef       	ldi	r25, 0xFF	; 255
  f8:	28 9f       	mul	r18, r24
  fa:	70 01       	movw	r14, r0
  fc:	29 9f       	mul	r18, r25
  fe:	f0 0c       	add	r15, r0
 100:	38 9f       	mul	r19, r24
 102:	f0 0c       	add	r15, r0
 104:	11 24       	eor	r1, r1
 106:	c7 01       	movw	r24, r14
 108:	81 0f       	add	r24, r17
 10a:	91 1d       	adc	r25, r1
 10c:	6a e0       	ldi	r22, 0x0A	; 10
 10e:	70 e0       	ldi	r23, 0x00	; 0
 110:	ce d0       	rcall	.+412    	; 0x2ae <__divmodhi4>
 112:	06 2f       	mov	r16, r22
	O=(num - (H*100) - (T*10));
	
	lcd_char(H+48);
 114:	84 2f       	mov	r24, r20
 116:	80 5d       	subi	r24, 0xD0	; 208
 118:	c6 df       	rcall	.-116    	; 0xa6 <lcd_char>
	lcd_char(T+48);
 11a:	80 2f       	mov	r24, r16
 11c:	80 5d       	subi	r24, 0xD0	; 208
 11e:	c3 df       	rcall	.-122    	; 0xa6 <lcd_char>
	lcd_char(O+48);
 120:	10 5d       	subi	r17, 0xD0	; 208
 122:	1e 0d       	add	r17, r14
 124:	86 ef       	ldi	r24, 0xF6	; 246
 126:	9f ef       	ldi	r25, 0xFF	; 255
 128:	08 9f       	mul	r16, r24
 12a:	00 2d       	mov	r16, r0
 12c:	11 24       	eor	r1, r1
 12e:	80 2f       	mov	r24, r16
 130:	81 0f       	add	r24, r17
 132:	b9 df       	rcall	.-142    	; 0xa6 <lcd_char>
}
 134:	1f 91       	pop	r17
 136:	0f 91       	pop	r16
 138:	ff 90       	pop	r15
 13a:	ef 90       	pop	r14
 13c:	08 95       	ret

0000013e <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row,unsigned char column)			//move cursor to the specified position
{
   if(row==0)
 13e:	88 23       	and	r24, r24
 140:	21 f4       	brne	.+8      	; 0x14a <lcd_gotoxy+0xc>
    {
	 lcd_cmd(0x80+column);
 142:	86 2f       	mov	r24, r22
 144:	80 58       	subi	r24, 0x80	; 128
 146:	a0 df       	rcall	.-192    	; 0x88 <lcd_cmd>
 148:	08 95       	ret
	}
   else if(row==1)
 14a:	81 30       	cpi	r24, 0x01	; 1
 14c:	19 f4       	brne	.+6      	; 0x154 <lcd_gotoxy+0x16>
	{
	 lcd_cmd(0xC0+column);	
 14e:	86 2f       	mov	r24, r22
 150:	80 54       	subi	r24, 0x40	; 64
 152:	9a df       	rcall	.-204    	; 0x88 <lcd_cmd>
 154:	08 95       	ret

00000156 <delay_ms_lcd>:
	}	
}


void delay_ms_lcd(unsigned int ms)
{
 156:	0a c0       	rjmp	.+20     	; 0x16c <delay_ms_lcd+0x16>
	int i;

	while (ms-- > 0)
 158:	20 e0       	ldi	r18, 0x00	; 0
 15a:	30 e0       	ldi	r19, 0x00	; 0
	{
		
		for (i = 0; i < 3276; ++i)
			asm("nop");
 15c:	00 00       	nop
	int i;

	while (ms-- > 0)
	{
		
		for (i = 0; i < 3276; ++i)
 15e:	2f 5f       	subi	r18, 0xFF	; 255
 160:	3f 4f       	sbci	r19, 0xFF	; 255
 162:	4c e0       	ldi	r20, 0x0C	; 12
 164:	2c 3c       	cpi	r18, 0xCC	; 204
 166:	34 07       	cpc	r19, r20
 168:	c9 f7       	brne	.-14     	; 0x15c <delay_ms_lcd+0x6>
 16a:	01 97       	sbiw	r24, 0x01	; 1

void delay_ms_lcd(unsigned int ms)
{
	int i;

	while (ms-- > 0)
 16c:	00 97       	sbiw	r24, 0x00	; 0
 16e:	a1 f7       	brne	.-24     	; 0x158 <delay_ms_lcd+0x2>
	{
		
		for (i = 0; i < 3276; ++i)
			asm("nop");
	}
}
 170:	08 95       	ret

00000172 <lcd_init>:
void lcd_gotoxy(unsigned char row,unsigned char column);
void delay_ms_lcd(unsigned int ms);
void lcd_clear();

void lcd_init(void)	//init the lcd
{	
 172:	1f 93       	push	r17
  
	DDRB=0x3F;
 174:	8f e3       	ldi	r24, 0x3F	; 63
 176:	87 bb       	out	0x17, r24	; 23
	delay_ms_lcd(20);
 178:	84 e1       	ldi	r24, 0x14	; 20
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	ec df       	rcall	.-40     	; 0x156 <delay_ms_lcd>

	
	PORTB=0x03;		
 17e:	13 e0       	ldi	r17, 0x03	; 3
 180:	18 bb       	out	0x18, r17	; 24
	latch();
 182:	7a df       	rcall	.-268    	; 0x78 <latch>
	delay_ms_lcd(5);
 184:	85 e0       	ldi	r24, 0x05	; 5
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	e6 df       	rcall	.-52     	; 0x156 <delay_ms_lcd>
	PORTB=0x03;
 18a:	18 bb       	out	0x18, r17	; 24
	latch();
 18c:	75 df       	rcall	.-278    	; 0x78 <latch>
	delay_ms_lcd(1);
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	e1 df       	rcall	.-62     	; 0x156 <delay_ms_lcd>
	PORTB=0x03;
 194:	18 bb       	out	0x18, r17	; 24
	latch();
 196:	70 df       	rcall	.-288    	; 0x78 <latch>
	delay_ms_lcd(1);
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	dc df       	rcall	.-72     	; 0x156 <delay_ms_lcd>
	PORTB=0x02;			//Enable 4 bit mode
 19e:	82 e0       	ldi	r24, 0x02	; 2
 1a0:	88 bb       	out	0x18, r24	; 24
	latch();
 1a2:	6a df       	rcall	.-300    	; 0x78 <latch>
	delay_ms_lcd(5);		
 1a4:	85 e0       	ldi	r24, 0x05	; 5
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	d6 df       	rcall	.-84     	; 0x156 <delay_ms_lcd>
	
  	   
	lcd_cmd(0x28);		//Set interface 4 bit 2 line
 1aa:	88 e2       	ldi	r24, 0x28	; 40
 1ac:	6d df       	rcall	.-294    	; 0x88 <lcd_cmd>
	delay_ms_lcd(1);
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	d1 df       	rcall	.-94     	; 0x156 <delay_ms_lcd>
	
	lcd_cmd(0x08);		//Enable display/cursor
 1b4:	88 e0       	ldi	r24, 0x08	; 8
 1b6:	68 df       	rcall	.-304    	; 0x88 <lcd_cmd>
	delay_ms_lcd(1);
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	cc df       	rcall	.-104    	; 0x156 <delay_ms_lcd>
	
	lcd_cmd(0x01);		//clear the display
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	63 df       	rcall	.-314    	; 0x88 <lcd_cmd>
	delay_ms_lcd(1);
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	c7 df       	rcall	.-114    	; 0x156 <delay_ms_lcd>
	
	lcd_cmd(0x06);		//Set cursor move, Move cursor right
 1c8:	86 e0       	ldi	r24, 0x06	; 6
 1ca:	5e df       	rcall	.-324    	; 0x88 <lcd_cmd>
	delay_ms_lcd(1);
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	c2 df       	rcall	.-124    	; 0x156 <delay_ms_lcd>
	   
		
	lcd_cmd(0X0C);		//Turn on display
 1d2:	8c e0       	ldi	r24, 0x0C	; 12
 1d4:	59 df       	rcall	.-334    	; 0x88 <lcd_cmd>
	delay_ms_lcd(2);
 1d6:	82 e0       	ldi	r24, 0x02	; 2
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	bd df       	rcall	.-134    	; 0x156 <delay_ms_lcd>

}
 1dc:	1f 91       	pop	r17
 1de:	08 95       	ret

000001e0 <lcd_clear>:
	}
}

void lcd_clear()
{
 lcd_cmd(0x01);
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	52 df       	rcall	.-348    	; 0x88 <lcd_cmd>
}
 1e4:	08 95       	ret

000001e6 <led>:
}
}
}

void led(char a)
{
 1e6:	41 e0       	ldi	r20, 0x01	; 1
 1e8:	50 e0       	ldi	r21, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1ea:	60 e9       	ldi	r22, 0x90	; 144
 1ec:	71 e0       	ldi	r23, 0x01	; 1
 for(int i=1;i<=10;i++)
 {
   PORTD=a;
 1ee:	82 bb       	out	0x12, r24	; 18
 1f0:	28 e8       	ldi	r18, 0x88	; 136
 1f2:	33 e1       	ldi	r19, 0x13	; 19
 1f4:	fb 01       	movw	r30, r22
 1f6:	31 97       	sbiw	r30, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <led+0x10>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1fa:	21 50       	subi	r18, 0x01	; 1
 1fc:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1fe:	d1 f7       	brne	.-12     	; 0x1f4 <led+0xe>
   _delay_ms(500);
   PORTD=0;
 200:	12 ba       	out	0x12, r1	; 18
 202:	28 e8       	ldi	r18, 0x88	; 136
 204:	33 e1       	ldi	r19, 0x13	; 19
 206:	fb 01       	movw	r30, r22
 208:	31 97       	sbiw	r30, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <led+0x22>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 20c:	21 50       	subi	r18, 0x01	; 1
 20e:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 210:	d1 f7       	brne	.-12     	; 0x206 <led+0x20>
}
}

void led(char a)
{
 for(int i=1;i<=10;i++)
 212:	4f 5f       	subi	r20, 0xFF	; 255
 214:	5f 4f       	sbci	r21, 0xFF	; 255
 216:	4b 30       	cpi	r20, 0x0B	; 11
 218:	51 05       	cpc	r21, r1
 21a:	49 f7       	brne	.-46     	; 0x1ee <led+0x8>
   PORTD=0;
   _delay_ms(500);

 }

}
 21c:	08 95       	ret

0000021e <main>:
#define F_CPU 16000000ul
#include<avr/io.h>
#include<util/delay.h>
#include"lcd.h"
void main()
{
 21e:	ef 92       	push	r14
 220:	ff 92       	push	r15
 222:	0f 93       	push	r16
 224:	1f 93       	push	r17
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
DDRD=0b00001111;
 22a:	8f e0       	ldi	r24, 0x0F	; 15
 22c:	81 bb       	out	0x11, r24	; 17
int c=1,d=1;
lcd_init();
 22e:	a1 df       	rcall	.-190    	; 0x172 <lcd_init>
 230:	01 e0       	ldi	r16, 0x01	; 1
 232:	10 e0       	ldi	r17, 0x00	; 0
 234:	c1 e0       	ldi	r28, 0x01	; 1
 236:	d0 e0       	ldi	r29, 0x00	; 0
 238:	90 e9       	ldi	r25, 0x90	; 144
 23a:	e9 2e       	mov	r14, r25
 23c:	91 e0       	ldi	r25, 0x01	; 1
 23e:	f9 2e       	mov	r15, r25
while(1)
{
    lcd_gotoxy(0,0);
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	60 e0       	ldi	r22, 0x00	; 0
 244:	7c df       	rcall	.-264    	; 0x13e <lcd_gotoxy>
	lcd_showvalue(d);
 246:	8c 2f       	mov	r24, r28
 248:	4b df       	rcall	.-362    	; 0xe0 <lcd_showvalue>

if((PIND&0b00010000)==0x00)
 24a:	84 99       	sbic	0x10, 4	; 16
 24c:	17 c0       	rjmp	.+46     	; 0x27c <main+0x5e>
 24e:	80 ed       	ldi	r24, 0xD0	; 208
 250:	97 e0       	ldi	r25, 0x07	; 7
 252:	f7 01       	movw	r30, r14
 254:	31 97       	sbiw	r30, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <main+0x36>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 258:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 25a:	d9 f7       	brne	.-10     	; 0x252 <main+0x34>
{
	_delay_ms(200);
	c=c*2;
 25c:	00 0f       	add	r16, r16
 25e:	11 1f       	adc	r17, r17
	d=d+1;
	if(c==16)
 260:	00 31       	cpi	r16, 0x10	; 16
 262:	11 05       	cpc	r17, r1
 264:	29 f4       	brne	.+10     	; 0x270 <main+0x52>
 266:	01 e0       	ldi	r16, 0x01	; 1
 268:	10 e0       	ldi	r17, 0x00	; 0
 26a:	c1 e0       	ldi	r28, 0x01	; 1
 26c:	d0 e0       	ldi	r29, 0x00	; 0
 26e:	01 c0       	rjmp	.+2      	; 0x272 <main+0x54>

if((PIND&0b00010000)==0x00)
{
	_delay_ms(200);
	c=c*2;
	d=d+1;
 270:	21 96       	adiw	r28, 0x01	; 1
	if(c==16)
	{
		c=1;
		d=1;
	}
	lcd_gotoxy(0,0);
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	60 e0       	ldi	r22, 0x00	; 0
 276:	63 df       	rcall	.-314    	; 0x13e <lcd_gotoxy>
	lcd_showvalue(d);
 278:	8c 2f       	mov	r24, r28
 27a:	32 df       	rcall	.-412    	; 0xe0 <lcd_showvalue>
	
}
if((PIND&0b00100000)==0x00)
 27c:	85 99       	sbic	0x10, 5	; 16
 27e:	e0 cf       	rjmp	.-64     	; 0x240 <main+0x22>
{
 lcd_gotoxy(1,0);
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	60 e0       	ldi	r22, 0x00	; 0
 284:	5c df       	rcall	.-328    	; 0x13e <lcd_gotoxy>
 lcd_string("Blink Led :");
 286:	80 e6       	ldi	r24, 0x60	; 96
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	1e df       	rcall	.-452    	; 0xc8 <lcd_string>
 lcd_showvalue(d);
 28c:	8c 2f       	mov	r24, r28
 28e:	28 df       	rcall	.-432    	; 0xe0 <lcd_showvalue>
 led(c);
 290:	c8 01       	movw	r24, r16
 292:	a9 df       	rcall	.-174    	; 0x1e6 <led>
 294:	d5 cf       	rjmp	.-86     	; 0x240 <main+0x22>

00000296 <__udivmodqi4>:
 296:	99 1b       	sub	r25, r25
 298:	79 e0       	ldi	r23, 0x09	; 9
 29a:	04 c0       	rjmp	.+8      	; 0x2a4 <__udivmodqi4_ep>

0000029c <__udivmodqi4_loop>:
 29c:	99 1f       	adc	r25, r25
 29e:	96 17       	cp	r25, r22
 2a0:	08 f0       	brcs	.+2      	; 0x2a4 <__udivmodqi4_ep>
 2a2:	96 1b       	sub	r25, r22

000002a4 <__udivmodqi4_ep>:
 2a4:	88 1f       	adc	r24, r24
 2a6:	7a 95       	dec	r23
 2a8:	c9 f7       	brne	.-14     	; 0x29c <__udivmodqi4_loop>
 2aa:	80 95       	com	r24
 2ac:	08 95       	ret

000002ae <__divmodhi4>:
 2ae:	97 fb       	bst	r25, 7
 2b0:	09 2e       	mov	r0, r25
 2b2:	07 26       	eor	r0, r23
 2b4:	0a d0       	rcall	.+20     	; 0x2ca <__divmodhi4_neg1>
 2b6:	77 fd       	sbrc	r23, 7
 2b8:	04 d0       	rcall	.+8      	; 0x2c2 <__divmodhi4_neg2>
 2ba:	0c d0       	rcall	.+24     	; 0x2d4 <__udivmodhi4>
 2bc:	06 d0       	rcall	.+12     	; 0x2ca <__divmodhi4_neg1>
 2be:	00 20       	and	r0, r0
 2c0:	1a f4       	brpl	.+6      	; 0x2c8 <__divmodhi4_exit>

000002c2 <__divmodhi4_neg2>:
 2c2:	70 95       	com	r23
 2c4:	61 95       	neg	r22
 2c6:	7f 4f       	sbci	r23, 0xFF	; 255

000002c8 <__divmodhi4_exit>:
 2c8:	08 95       	ret

000002ca <__divmodhi4_neg1>:
 2ca:	f6 f7       	brtc	.-4      	; 0x2c8 <__divmodhi4_exit>
 2cc:	90 95       	com	r25
 2ce:	81 95       	neg	r24
 2d0:	9f 4f       	sbci	r25, 0xFF	; 255
 2d2:	08 95       	ret

000002d4 <__udivmodhi4>:
 2d4:	aa 1b       	sub	r26, r26
 2d6:	bb 1b       	sub	r27, r27
 2d8:	51 e1       	ldi	r21, 0x11	; 17
 2da:	07 c0       	rjmp	.+14     	; 0x2ea <__udivmodhi4_ep>

000002dc <__udivmodhi4_loop>:
 2dc:	aa 1f       	adc	r26, r26
 2de:	bb 1f       	adc	r27, r27
 2e0:	a6 17       	cp	r26, r22
 2e2:	b7 07       	cpc	r27, r23
 2e4:	10 f0       	brcs	.+4      	; 0x2ea <__udivmodhi4_ep>
 2e6:	a6 1b       	sub	r26, r22
 2e8:	b7 0b       	sbc	r27, r23

000002ea <__udivmodhi4_ep>:
 2ea:	88 1f       	adc	r24, r24
 2ec:	99 1f       	adc	r25, r25
 2ee:	5a 95       	dec	r21
 2f0:	a9 f7       	brne	.-22     	; 0x2dc <__udivmodhi4_loop>
 2f2:	80 95       	com	r24
 2f4:	90 95       	com	r25
 2f6:	bc 01       	movw	r22, r24
 2f8:	cd 01       	movw	r24, r26
 2fa:	08 95       	ret

000002fc <_exit>:
 2fc:	f8 94       	cli

000002fe <__stop_program>:
 2fe:	ff cf       	rjmp	.-2      	; 0x2fe <__stop_program>
