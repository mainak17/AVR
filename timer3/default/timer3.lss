
timer3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000238  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000027  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000003d9  00000000  00000000  000002d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000160  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000392  00000000  00000000  0000080c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  00000ba0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000cb  00000000  00000000  00000bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000378  00000000  00000000  00000c9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000090  00000000  00000000  00001013  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	5b d0       	rcall	.+182    	; 0xea <main>
  34:	ff c0       	rjmp	.+510    	; 0x234 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <display>:
		
	
}//main

void display(int i,int j)
{	
  38:	9c 01       	movw	r18, r24
	
	 if(j==1)
  3a:	61 30       	cpi	r22, 0x01	; 1
  3c:	71 05       	cpc	r23, r1
  3e:	19 f4       	brne	.+6      	; 0x46 <__SREG__+0x7>
	 {
	 	PORTC=0x01;
  40:	81 e0       	ldi	r24, 0x01	; 1
  42:	85 bb       	out	0x15, r24	; 21
  44:	10 c0       	rjmp	.+32     	; 0x66 <__SREG__+0x27>
	 }
	 if(j==2)
  46:	62 30       	cpi	r22, 0x02	; 2
  48:	71 05       	cpc	r23, r1
  4a:	19 f4       	brne	.+6      	; 0x52 <__SREG__+0x13>
	 {
	 	PORTC=0x02;
  4c:	82 e0       	ldi	r24, 0x02	; 2
  4e:	85 bb       	out	0x15, r24	; 21
  50:	0f c0       	rjmp	.+30     	; 0x70 <__SREG__+0x31>
	 }
	 if(j==3)
  52:	63 30       	cpi	r22, 0x03	; 3
  54:	71 05       	cpc	r23, r1
  56:	11 f4       	brne	.+4      	; 0x5c <__SREG__+0x1d>
	 {
	 	PORTC=0x04;
  58:	84 e0       	ldi	r24, 0x04	; 4
  5a:	0e c0       	rjmp	.+28     	; 0x78 <__SREG__+0x39>
	 }
	 if(j==4)
  5c:	64 30       	cpi	r22, 0x04	; 4
  5e:	71 05       	cpc	r23, r1
  60:	11 f4       	brne	.+4      	; 0x66 <__SREG__+0x27>
	 {
	 	PORTC=0x08;
  62:	88 e0       	ldi	r24, 0x08	; 8
  64:	09 c0       	rjmp	.+18     	; 0x78 <__SREG__+0x39>
	 }
	 if(j==5)
  66:	65 30       	cpi	r22, 0x05	; 5
  68:	71 05       	cpc	r23, r1
  6a:	11 f4       	brne	.+4      	; 0x70 <__SREG__+0x31>
	 {
	 	PORTC=0x10;
  6c:	80 e1       	ldi	r24, 0x10	; 16
  6e:	04 c0       	rjmp	.+8      	; 0x78 <__SREG__+0x39>
	 }
	 if(j==6)
  70:	66 30       	cpi	r22, 0x06	; 6
  72:	71 05       	cpc	r23, r1
  74:	11 f4       	brne	.+4      	; 0x7a <__SREG__+0x3b>
	 {
	 	PORTC=0x20;
  76:	80 e2       	ldi	r24, 0x20	; 32
  78:	85 bb       	out	0x15, r24	; 21
	 }

	 
	if(i==1)     
  7a:	21 30       	cpi	r18, 0x01	; 1
  7c:	31 05       	cpc	r19, r1
  7e:	19 f4       	brne	.+6      	; 0x86 <__SREG__+0x47>
	PORTD=~(0x06);				
  80:	89 ef       	ldi	r24, 0xF9	; 249
  82:	82 bb       	out	0x12, r24	; 18
  84:	12 c0       	rjmp	.+36     	; 0xaa <__SREG__+0x6b>
	if(i==2)
  86:	22 30       	cpi	r18, 0x02	; 2
  88:	31 05       	cpc	r19, r1
  8a:	19 f4       	brne	.+6      	; 0x92 <__SREG__+0x53>
	PORTD=~(0x5b);
  8c:	84 ea       	ldi	r24, 0xA4	; 164
  8e:	82 bb       	out	0x12, r24	; 18
  90:	12 c0       	rjmp	.+36     	; 0xb6 <__SREG__+0x77>
	if(i==3)
  92:	23 30       	cpi	r18, 0x03	; 3
  94:	31 05       	cpc	r19, r1
  96:	19 f4       	brne	.+6      	; 0x9e <__SREG__+0x5f>
	PORTD=~(0x4f);
  98:	80 eb       	ldi	r24, 0xB0	; 176
  9a:	82 bb       	out	0x12, r24	; 18
  9c:	11 c0       	rjmp	.+34     	; 0xc0 <__SREG__+0x81>
	if(i==4)
  9e:	24 30       	cpi	r18, 0x04	; 4
  a0:	31 05       	cpc	r19, r1
  a2:	19 f4       	brne	.+6      	; 0xaa <__SREG__+0x6b>
	PORTD=~(0x66);
  a4:	89 e9       	ldi	r24, 0x99	; 153
  a6:	82 bb       	out	0x12, r24	; 18
  a8:	10 c0       	rjmp	.+32     	; 0xca <__SREG__+0x8b>
	if(i==5)
  aa:	25 30       	cpi	r18, 0x05	; 5
  ac:	31 05       	cpc	r19, r1
  ae:	19 f4       	brne	.+6      	; 0xb6 <__SREG__+0x77>
	PORTD=~(0x6d);
  b0:	82 e9       	ldi	r24, 0x92	; 146
  b2:	82 bb       	out	0x12, r24	; 18
  b4:	0f c0       	rjmp	.+30     	; 0xd4 <__SREG__+0x95>
	if(i==6)
  b6:	26 30       	cpi	r18, 0x06	; 6
  b8:	31 05       	cpc	r19, r1
  ba:	11 f4       	brne	.+4      	; 0xc0 <__SREG__+0x81>
	PORTD=~(0x7d);
  bc:	82 e8       	ldi	r24, 0x82	; 130
  be:	0e c0       	rjmp	.+28     	; 0xdc <__SREG__+0x9d>
	if(i==7)
  c0:	27 30       	cpi	r18, 0x07	; 7
  c2:	31 05       	cpc	r19, r1
  c4:	11 f4       	brne	.+4      	; 0xca <__SREG__+0x8b>
	PORTD=~(0x07);
  c6:	88 ef       	ldi	r24, 0xF8	; 248
  c8:	09 c0       	rjmp	.+18     	; 0xdc <__SREG__+0x9d>
	if(i==8)
  ca:	28 30       	cpi	r18, 0x08	; 8
  cc:	31 05       	cpc	r19, r1
  ce:	11 f4       	brne	.+4      	; 0xd4 <__SREG__+0x95>
	PORTD=~(0x7f);
  d0:	80 e8       	ldi	r24, 0x80	; 128
  d2:	04 c0       	rjmp	.+8      	; 0xdc <__SREG__+0x9d>
	if(i==9)
  d4:	29 30       	cpi	r18, 0x09	; 9
  d6:	31 05       	cpc	r19, r1
  d8:	19 f4       	brne	.+6      	; 0xe0 <__SREG__+0xa1>
	PORTD=~(0x6f);
  da:	80 e9       	ldi	r24, 0x90	; 144
  dc:	82 bb       	out	0x12, r24	; 18
  de:	08 95       	ret
	if(i==0)
  e0:	23 2b       	or	r18, r19
  e2:	11 f4       	brne	.+4      	; 0xe8 <__SREG__+0xa9>
	PORTD=~(0x3f); 
  e4:	80 ec       	ldi	r24, 0xC0	; 192
  e6:	82 bb       	out	0x12, r24	; 18
  e8:	08 95       	ret

000000ea <main>:
#include <avr/io.h>
#include <util/delay.h>


 void main()
{   
  ea:	5f 92       	push	r5
  ec:	6f 92       	push	r6
  ee:	7f 92       	push	r7
  f0:	8f 92       	push	r8
  f2:	9f 92       	push	r9
  f4:	af 92       	push	r10
  f6:	bf 92       	push	r11
  f8:	cf 92       	push	r12
  fa:	df 92       	push	r13
  fc:	ef 92       	push	r14
  fe:	ff 92       	push	r15
 100:	0f 93       	push	r16
 102:	1f 93       	push	r17
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
int hrs=0;
int sec=0;
int secs;
int k=0;

	DDRD=0xFF;
 108:	8f ef       	ldi	r24, 0xFF	; 255
 10a:	81 bb       	out	0x11, r24	; 17
	DDRC=0xFF;
 10c:	84 bb       	out	0x14, r24	; 20
	DDRB=0x0F;
 10e:	8f e0       	ldi	r24, 0x0F	; 15
 110:	87 bb       	out	0x17, r24	; 23
 112:	01 e0       	ldi	r16, 0x01	; 1
 114:	10 e0       	ldi	r17, 0x00	; 0
 116:	cc 24       	eor	r12, r12
 118:	dd 24       	eor	r13, r13
 11a:	c0 e0       	ldi	r28, 0x00	; 0
 11c:	d0 e0       	ldi	r29, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 11e:	40 ea       	ldi	r20, 0xA0	; 160
 120:	a4 2e       	mov	r10, r20
 122:	4f e0       	ldi	r20, 0x0F	; 15
 124:	b4 2e       	mov	r11, r20
			if((min==0)&&(sec==0))
			{
			break;
			}
          }//for
PORTB=0x02;
 126:	30 e9       	ldi	r19, 0x90	; 144
 128:	83 2e       	mov	r8, r19
 12a:	31 e0       	ldi	r19, 0x01	; 1
 12c:	93 2e       	mov	r9, r19
 12e:	22 e0       	ldi	r18, 0x02	; 2
 130:	52 2e       	mov	r5, r18
 132:	06 c0       	rjmp	.+12     	; 0x140 <main+0x56>
int secs;
int k=0;

	DDRD=0xFF;
	DDRC=0xFF;
	DDRB=0x0F;
 134:	01 e0       	ldi	r16, 0x01	; 1
 136:	10 e0       	ldi	r17, 0x00	; 0
 138:	66 24       	eor	r6, r6
 13a:	77 24       	eor	r7, r7
 13c:	c0 e0       	ldi	r28, 0x00	; 0
 13e:	d0 e0       	ldi	r29, 0x00	; 0
	while(1)
	{	
		if((PINB&0x20)==0x00)
 140:	b5 99       	sbic	0x16, 5	; 22
 142:	04 c0       	rjmp	.+8      	; 0x14c <main+0x62>
 144:	91 e0       	ldi	r25, 0x01	; 1
 146:	c9 2e       	mov	r12, r25
 148:	d1 2c       	mov	r13, r1
 14a:	04 c0       	rjmp	.+8      	; 0x154 <main+0x6a>
			{
			c=1;
				
			}
		if(c==1)
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	c8 16       	cp	r12, r24
 150:	d1 04       	cpc	r13, r1
 152:	c9 f4       	brne	.+50     	; 0x186 <main+0x9c>
		{
		            display(k,5);
 154:	ce 01       	movw	r24, r28
 156:	65 e0       	ldi	r22, 0x05	; 5
 158:	70 e0       	ldi	r23, 0x00	; 0
 15a:	6e df       	rcall	.-292    	; 0x38 <display>
 15c:	c5 01       	movw	r24, r10
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <main+0x74>
					_delay_ms(1);
					display(0,6);
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	66 e0       	ldi	r22, 0x06	; 6
 168:	70 e0       	ldi	r23, 0x00	; 0
 16a:	66 df       	rcall	.-308    	; 0x38 <display>
 16c:	c5 01       	movw	r24, r10
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <main+0x84>
					_delay_ms(1);

			if((PINB&0x20)==0x00)
 172:	b5 99       	sbic	0x16, 5	; 22
 174:	08 c0       	rjmp	.+16     	; 0x186 <main+0x9c>
 176:	88 eb       	ldi	r24, 0xB8	; 184
 178:	9b e0       	ldi	r25, 0x0B	; 11
 17a:	f4 01       	movw	r30, r8
 17c:	31 97       	sbiw	r30, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <main+0x92>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 180:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 182:	d9 f7       	brne	.-10     	; 0x17a <main+0x90>
			{
			_delay_ms(300);
			 k++;	
 184:	21 96       	adiw	r28, 0x01	; 1
			}
          
		}

		if((PINB&0x10)==0x00)
 186:	b4 99       	sbic	0x16, 4	; 22
 188:	0e c0       	rjmp	.+28     	; 0x1a6 <main+0xbc>
 18a:	88 eb       	ldi	r24, 0xB8	; 184
 18c:	9b e0       	ldi	r25, 0x0B	; 11
 18e:	f4 01       	movw	r30, r8
 190:	31 97       	sbiw	r30, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <main+0xa6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 194:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 196:	d9 f7       	brne	.-10     	; 0x18e <main+0xa4>
			{
			_delay_ms(300);	 
			i++;
 198:	0f 5f       	subi	r16, 0xFF	; 255
 19a:	1f 4f       	sbci	r17, 0xFF	; 255
 19c:	cc 24       	eor	r12, r12
 19e:	dd 24       	eor	r13, r13
 1a0:	89 e0       	ldi	r24, 0x09	; 9
 1a2:	68 2e       	mov	r6, r24
 1a4:	71 2c       	mov	r7, r1
			secs=9;
			c=0;
			}			

if(i%2==0)
 1a6:	00 fd       	sbrc	r16, 0
 1a8:	cb cf       	rjmp	.-106    	; 0x140 <main+0x56>
	{	for(min=k-1;min>=0;min--)
 1aa:	7e 01       	movw	r14, r28
 1ac:	28 c0       	rjmp	.+80     	; 0x1fe <main+0x114>
 1ae:	00 e0       	ldi	r16, 0x00	; 0
 1b0:	10 e0       	ldi	r17, 0x00	; 0
			for(sec=secs;sec>=0;sec--)
	 			{
			
			for(int y=0;y<250;y++)
				 {
					display(min,3);
 1b2:	c7 01       	movw	r24, r14
 1b4:	63 e0       	ldi	r22, 0x03	; 3
 1b6:	70 e0       	ldi	r23, 0x00	; 0
 1b8:	3f df       	rcall	.-386    	; 0x38 <display>
 1ba:	c5 01       	movw	r24, r10
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <main+0xd2>
					_delay_ms(1);
					display(0,4);
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	64 e0       	ldi	r22, 0x04	; 4
 1c6:	70 e0       	ldi	r23, 0x00	; 0
 1c8:	37 df       	rcall	.-402    	; 0x38 <display>
 1ca:	c5 01       	movw	r24, r10
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <main+0xe2>
					_delay_ms(1);
					
					display(sec,1);
 1d0:	ce 01       	movw	r24, r28
 1d2:	61 e0       	ldi	r22, 0x01	; 1
 1d4:	70 e0       	ldi	r23, 0x00	; 0
 1d6:	30 df       	rcall	.-416    	; 0x38 <display>
 1d8:	c5 01       	movw	r24, r10
 1da:	01 97       	sbiw	r24, 0x01	; 1
 1dc:	f1 f7       	brne	.-4      	; 0x1da <main+0xf0>
					_delay_ms(1);
					display(0,2);
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	62 e0       	ldi	r22, 0x02	; 2
 1e4:	70 e0       	ldi	r23, 0x00	; 0
 1e6:	28 df       	rcall	.-432    	; 0x38 <display>
 1e8:	c5 01       	movw	r24, r10
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <main+0x100>
			{
				
			for(sec=secs;sec>=0;sec--)
	 			{
			
			for(int y=0;y<250;y++)
 1ee:	0f 5f       	subi	r16, 0xFF	; 255
 1f0:	1f 4f       	sbci	r17, 0xFF	; 255
 1f2:	0a 3f       	cpi	r16, 0xFA	; 250
 1f4:	11 05       	cpc	r17, r1
 1f6:	e9 f6       	brne	.-70     	; 0x1b2 <main+0xc8>

if(i%2==0)
	{	for(min=k-1;min>=0;min--)
			{
				
			for(sec=secs;sec>=0;sec--)
 1f8:	21 97       	sbiw	r28, 0x01	; 1
 1fa:	d7 ff       	sbrs	r29, 7
 1fc:	d8 cf       	rjmp	.-80     	; 0x1ae <main+0xc4>
			secs=9;
			c=0;
			}			

if(i%2==0)
	{	for(min=k-1;min>=0;min--)
 1fe:	08 94       	sec
 200:	e1 08       	sbc	r14, r1
 202:	f1 08       	sbc	r15, r1
 204:	8f ef       	ldi	r24, 0xFF	; 255
 206:	e8 16       	cp	r14, r24
 208:	8f ef       	ldi	r24, 0xFF	; 255
 20a:	f8 06       	cpc	r15, r24
 20c:	11 f0       	breq	.+4      	; 0x212 <main+0x128>
 20e:	e3 01       	movw	r28, r6
 210:	f4 cf       	rjmp	.-24     	; 0x1fa <main+0x110>
			if((min==0)&&(sec==0))
			{
			break;
			}
          }//for
PORTB=0x02;
 212:	58 ba       	out	0x18, r5	; 24
 214:	80 ed       	ldi	r24, 0xD0	; 208
 216:	97 e0       	ldi	r25, 0x07	; 7
 218:	f4 01       	movw	r30, r8
 21a:	31 97       	sbiw	r30, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <main+0x130>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 21e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 220:	d9 f7       	brne	.-10     	; 0x218 <main+0x12e>
_delay_ms(200);
PORTB=0x00;
 222:	18 ba       	out	0x18, r1	; 24
 224:	80 ed       	ldi	r24, 0xD0	; 208
 226:	97 e0       	ldi	r25, 0x07	; 7
 228:	f4 01       	movw	r30, r8
 22a:	31 97       	sbiw	r30, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <main+0x140>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 22e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 230:	d9 f7       	brne	.-10     	; 0x228 <main+0x13e>
 232:	80 cf       	rjmp	.-256    	; 0x134 <main+0x4a>

00000234 <_exit>:
 234:	f8 94       	cli

00000236 <__stop_program>:
 236:	ff cf       	rjmp	.-2      	; 0x236 <__stop_program>
