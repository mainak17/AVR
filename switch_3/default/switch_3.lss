
switch_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000aa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  0000011e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000172  00000000  00000000  00000139  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000e4  00000000  00000000  000002ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001a1  00000000  00000000  0000038f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000530  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000d1  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000e0  00000000  00000000  00000621  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000701  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	38 c0       	rjmp	.+112    	; 0xa6 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#define F_CPU 16000000ul
#include<avr/io.h>
#include<util/delay.h>
void main()
{
DDRB = 0b00000011;
  38:	83 e0       	ldi	r24, 0x03	; 3
  3a:	87 bb       	out	0x17, r24	; 23
  3c:	40 e0       	ldi	r20, 0x00	; 0
  3e:	50 e0       	ldi	r21, 0x00	; 0
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  44:	60 e9       	ldi	r22, 0x90	; 144
  46:	71 e0       	ldi	r23, 0x01	; 1
int a=0,b=0;
while(1)
{
if((PINB&0b00000100)==0x00) 
  48:	b2 99       	sbic	0x16, 2	; 22
  4a:	0e c0       	rjmp	.+28     	; 0x68 <__SREG__+0x29>
  4c:	80 ed       	ldi	r24, 0xD0	; 208
  4e:	97 e0       	ldi	r25, 0x07	; 7
  50:	fb 01       	movw	r30, r22
  52:	31 97       	sbiw	r30, 0x01	; 1
  54:	f1 f7       	brne	.-4      	; 0x52 <__SREG__+0x13>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  56:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  58:	d9 f7       	brne	.-10     	; 0x50 <__SREG__+0x11>
{
_delay_ms(200);
a++;
  5a:	4f 5f       	subi	r20, 0xFF	; 255
  5c:	5f 4f       	sbci	r21, 0xFF	; 255
if(a==20)
  5e:	44 31       	cpi	r20, 0x14	; 20
  60:	51 05       	cpc	r21, r1
  62:	11 f4       	brne	.+4      	; 0x68 <__SREG__+0x29>
  64:	40 e0       	ldi	r20, 0x00	; 0
  66:	50 e0       	ldi	r21, 0x00	; 0
a=0;


}
}
if((PINB&0b00001000)==0x00) 
  68:	b3 99       	sbic	0x16, 3	; 22
  6a:	0e c0       	rjmp	.+28     	; 0x88 <__SREG__+0x49>
  6c:	80 ed       	ldi	r24, 0xD0	; 208
  6e:	97 e0       	ldi	r25, 0x07	; 7
  70:	fb 01       	movw	r30, r22
  72:	31 97       	sbiw	r30, 0x01	; 1
  74:	f1 f7       	brne	.-4      	; 0x72 <__SREG__+0x33>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  76:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  78:	d9 f7       	brne	.-10     	; 0x70 <__SREG__+0x31>
{
_delay_ms(200);
b++;
  7a:	2f 5f       	subi	r18, 0xFF	; 255
  7c:	3f 4f       	sbci	r19, 0xFF	; 255
if(b==20)
  7e:	24 31       	cpi	r18, 0x14	; 20
  80:	31 05       	cpc	r19, r1
  82:	11 f4       	brne	.+4      	; 0x88 <__SREG__+0x49>
  84:	20 e0       	ldi	r18, 0x00	; 0
  86:	30 e0       	ldi	r19, 0x00	; 0

}
}


if((a%2)==0)
  88:	40 fd       	sbrc	r20, 0
  8a:	04 c0       	rjmp	.+8      	; 0x94 <__SREG__+0x55>
PORTB&=0x0E;//0000 1110
  8c:	88 b3       	in	r24, 0x18	; 24
  8e:	8e 70       	andi	r24, 0x0E	; 14
  90:	88 bb       	out	0x18, r24	; 24
  92:	01 c0       	rjmp	.+2      	; 0x96 <__SREG__+0x57>
else
{
PORTB|=0x01;
  94:	c0 9a       	sbi	0x18, 0	; 24
}

if((b%2)==0)
  96:	20 fd       	sbrc	r18, 0
  98:	04 c0       	rjmp	.+8      	; 0xa2 <__SREG__+0x63>
{
PORTB&=0x0D;
  9a:	88 b3       	in	r24, 0x18	; 24
  9c:	8d 70       	andi	r24, 0x0D	; 13
  9e:	88 bb       	out	0x18, r24	; 24
  a0:	d3 cf       	rjmp	.-90     	; 0x48 <__SREG__+0x9>
}
else
{
PORTB|=0x02;
  a2:	c1 9a       	sbi	0x18, 1	; 24
  a4:	d1 cf       	rjmp	.-94     	; 0x48 <__SREG__+0x9>

000000a6 <_exit>:
  a6:	f8 94       	cli

000000a8 <__stop_program>:
  a8:	ff cf       	rjmp	.-2      	; 0xa8 <__stop_program>
