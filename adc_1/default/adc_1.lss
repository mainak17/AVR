
adc_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000288  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000007  00800060  00800060  000002fc  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000f2  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000003ca  00000000  00000000  0000040e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001ce  00000000  00000000  000007d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000436  00000000  00000000  000009a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000e0  00000000  00000000  00000ddc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000017b  00000000  00000000  00000ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000013a  00000000  00000000  00001037  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00001171  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a7 36       	cpi	r26, 0x67	; 103
  3e:	b1 07       	cpc	r27, r17
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	d5 d0       	rcall	.+426    	; 0x1ee <main>
  44:	1f c1       	rjmp	.+574    	; 0x284 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <adc_init>:

unsigned int adcdata,adcdata1;

 void adc_init()
 {
  ADCSRA=0X86;						//ADC enable, ADC interrupt enable, set prescaller to 64
  48:	86 e8       	ldi	r24, 0x86	; 134
  4a:	86 b9       	out	0x06, r24	; 6
  		
 }
  4c:	08 95       	ret

0000004e <getdata>:
 unsigned char getdata(unsigned char chno)	
  {
    ADMUX=0X60;						//right align the ADC result
  4e:	90 e6       	ldi	r25, 0x60	; 96
  50:	97 b9       	out	0x07, r25	; 7
    ADMUX|=chno;					//select the ADC channel
  52:	97 b1       	in	r25, 0x07	; 7
  54:	98 2b       	or	r25, r24
  56:	97 b9       	out	0x07, r25	; 7
    ADCSRA|=0X40;					//start ADC convertion
  58:	36 9a       	sbi	0x06, 6	; 6
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  5a:	8a ef       	ldi	r24, 0xFA	; 250
  5c:	90 e0       	ldi	r25, 0x00	; 0
  5e:	01 97       	sbiw	r24, 0x01	; 1
  60:	f1 f7       	brne	.-4      	; 0x5e <getdata+0x10>
    _delay_ms(1);					//give some time delay to complit the aDC convertion
	return ADCH;
  62:	85 b1       	in	r24, 0x05	; 5
  }
  64:	08 95       	ret

00000066 <delay_ns_lcd>:
delay_ns_lcd(200);  
PORTB&=~0x20;
}

void delay_ns_lcd(unsigned char tim)
{
  66:	20 91 60 00 	lds	r18, 0x0060
  6a:	90 e0       	ldi	r25, 0x00	; 0
  6c:	02 c0       	rjmp	.+4      	; 0x72 <delay_ns_lcd+0xc>
	for(j=0;j<tim;j++)
  6e:	9f 5f       	subi	r25, 0xFF	; 255
  70:	2b e0       	ldi	r18, 0x0B	; 11
  72:	98 17       	cp	r25, r24
  74:	e0 f3       	brcs	.-8      	; 0x6e <delay_ns_lcd+0x8>
  76:	20 93 60 00 	sts	0x0060, r18
  7a:	90 93 61 00 	sts	0x0061, r25
	{
		for(k=0;k<11;k++)
		{};
	}
}
  7e:	08 95       	ret

00000080 <latch>:

}

void latch(void)
{
PORTB&=~0x20;
  80:	c5 98       	cbi	0x18, 5	; 24
delay_ns_lcd(200);  
  82:	88 ec       	ldi	r24, 0xC8	; 200
  84:	f0 df       	rcall	.-32     	; 0x66 <delay_ns_lcd>
PORTB|=0x20;
  86:	c5 9a       	sbi	0x18, 5	; 24
delay_ns_lcd(200);  
  88:	88 ec       	ldi	r24, 0xC8	; 200
  8a:	ed df       	rcall	.-38     	; 0x66 <delay_ns_lcd>
PORTB&=~0x20;
  8c:	c5 98       	cbi	0x18, 5	; 24
}
  8e:	08 95       	ret

00000090 <lcd_cmd>:
		{};
	}
}

void lcd_cmd(unsigned char cmd)
{   unsigned char cmd_temp=cmd;
  90:	1f 93       	push	r17
  92:	18 2f       	mov	r17, r24
	PORTB&=~0x30;
  94:	88 b3       	in	r24, 0x18	; 24
  96:	8f 7c       	andi	r24, 0xCF	; 207
  98:	88 bb       	out	0x18, r24	; 24
	cmd_temp>>=4;
	PORTB=((cmd_temp & 0x0F));			
  9a:	81 2f       	mov	r24, r17
  9c:	82 95       	swap	r24
  9e:	8f 70       	andi	r24, 0x0F	; 15
  a0:	88 bb       	out	0x18, r24	; 24
	latch();
  a2:	ee df       	rcall	.-36     	; 0x80 <latch>
	PORTB=(cmd & 0x0F);	
  a4:	1f 70       	andi	r17, 0x0F	; 15
  a6:	18 bb       	out	0x18, r17	; 24
	latch();
  a8:	eb df       	rcall	.-42     	; 0x80 <latch>
}
  aa:	1f 91       	pop	r17
  ac:	08 95       	ret

000000ae <lcd_char>:


void lcd_char(unsigned char single)
{
  ae:	1f 93       	push	r17
  b0:	18 2f       	mov	r17, r24
    unsigned char temp_single=single;
	temp_single>>=4;
	PORTB=0x10;
  b2:	80 e1       	ldi	r24, 0x10	; 16
  b4:	88 bb       	out	0x18, r24	; 24
	PORTB=0x00;
  b6:	18 ba       	out	0x18, r1	; 24
	PORTB=(temp_single & 0x0F)|0x10;						
  b8:	81 2f       	mov	r24, r17
  ba:	82 95       	swap	r24
  bc:	8f 70       	andi	r24, 0x0F	; 15
  be:	80 61       	ori	r24, 0x10	; 16
  c0:	88 bb       	out	0x18, r24	; 24
	latch();
  c2:	de df       	rcall	.-68     	; 0x80 <latch>
	PORTB=(single & 0x0F)|0x10;
  c4:	1f 70       	andi	r17, 0x0F	; 15
  c6:	10 61       	ori	r17, 0x10	; 16
  c8:	18 bb       	out	0x18, r17	; 24
	latch();
  ca:	da df       	rcall	.-76     	; 0x80 <latch>
}
  cc:	1f 91       	pop	r17
  ce:	08 95       	ret

000000d0 <lcd_string>:

void lcd_string(unsigned char *str)
{
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	ec 01       	movw	r28, r24
  d6:	02 c0       	rjmp	.+4      	; 0xdc <lcd_string+0xc>
	unsigned char k=0;

		while(*str!='\0')	//Till null character is encountered
		{
			lcd_char(*str);
  d8:	ea df       	rcall	.-44     	; 0xae <lcd_char>
			str++;
  da:	21 96       	adiw	r28, 0x01	; 1

void lcd_string(unsigned char *str)
{
	unsigned char k=0;

		while(*str!='\0')	//Till null character is encountered
  dc:	88 81       	ld	r24, Y
  de:	88 23       	and	r24, r24
  e0:	d9 f7       	brne	.-10     	; 0xd8 <lcd_string+0x8>
		{
			lcd_char(*str);
			str++;
		}
}
  e2:	df 91       	pop	r29
  e4:	cf 91       	pop	r28
  e6:	08 95       	ret

000000e8 <lcd_showvalue>:



void lcd_showvalue(unsigned char num)	//prints the decimal 3digit value of num
{
  e8:	ef 92       	push	r14
  ea:	ff 92       	push	r15
  ec:	0f 93       	push	r16
  ee:	1f 93       	push	r17
  f0:	18 2f       	mov	r17, r24
	unsigned char H=0,T=0,O=0;
	H=num/100;
  f2:	64 e6       	ldi	r22, 0x64	; 100
  f4:	94 d0       	rcall	.+296    	; 0x21e <__udivmodqi4>
  f6:	48 2f       	mov	r20, r24
	T=(num - (H*100))/10;
  f8:	28 2f       	mov	r18, r24
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	8c e9       	ldi	r24, 0x9C	; 156
  fe:	9f ef       	ldi	r25, 0xFF	; 255
 100:	28 9f       	mul	r18, r24
 102:	70 01       	movw	r14, r0
 104:	29 9f       	mul	r18, r25
 106:	f0 0c       	add	r15, r0
 108:	38 9f       	mul	r19, r24
 10a:	f0 0c       	add	r15, r0
 10c:	11 24       	eor	r1, r1
 10e:	c7 01       	movw	r24, r14
 110:	81 0f       	add	r24, r17
 112:	91 1d       	adc	r25, r1
 114:	6a e0       	ldi	r22, 0x0A	; 10
 116:	70 e0       	ldi	r23, 0x00	; 0
 118:	8e d0       	rcall	.+284    	; 0x236 <__divmodhi4>
 11a:	06 2f       	mov	r16, r22
	O=(num - (H*100) - (T*10));
	
	lcd_char(H+48);
 11c:	84 2f       	mov	r24, r20
 11e:	80 5d       	subi	r24, 0xD0	; 208
 120:	c6 df       	rcall	.-116    	; 0xae <lcd_char>
	lcd_char(T+48);
 122:	80 2f       	mov	r24, r16
 124:	80 5d       	subi	r24, 0xD0	; 208
 126:	c3 df       	rcall	.-122    	; 0xae <lcd_char>
	lcd_char(O+48);
 128:	10 5d       	subi	r17, 0xD0	; 208
 12a:	1e 0d       	add	r17, r14
 12c:	86 ef       	ldi	r24, 0xF6	; 246
 12e:	9f ef       	ldi	r25, 0xFF	; 255
 130:	08 9f       	mul	r16, r24
 132:	00 2d       	mov	r16, r0
 134:	11 24       	eor	r1, r1
 136:	80 2f       	mov	r24, r16
 138:	81 0f       	add	r24, r17
 13a:	b9 df       	rcall	.-142    	; 0xae <lcd_char>
}
 13c:	1f 91       	pop	r17
 13e:	0f 91       	pop	r16
 140:	ff 90       	pop	r15
 142:	ef 90       	pop	r14
 144:	08 95       	ret

00000146 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row,unsigned char column)			//move cursor to the specified position
{
   if(row==0)
 146:	88 23       	and	r24, r24
 148:	21 f4       	brne	.+8      	; 0x152 <lcd_gotoxy+0xc>
    {
	 lcd_cmd(0x80+column);
 14a:	86 2f       	mov	r24, r22
 14c:	80 58       	subi	r24, 0x80	; 128
 14e:	a0 df       	rcall	.-192    	; 0x90 <lcd_cmd>
 150:	08 95       	ret
	}
   else if(row==1)
 152:	81 30       	cpi	r24, 0x01	; 1
 154:	19 f4       	brne	.+6      	; 0x15c <lcd_gotoxy+0x16>
	{
	 lcd_cmd(0xC0+column);	
 156:	86 2f       	mov	r24, r22
 158:	80 54       	subi	r24, 0x40	; 64
 15a:	9a df       	rcall	.-204    	; 0x90 <lcd_cmd>
 15c:	08 95       	ret

0000015e <delay_ms_lcd>:
	}	
}


void delay_ms_lcd(unsigned int ms)
{
 15e:	0a c0       	rjmp	.+20     	; 0x174 <delay_ms_lcd+0x16>
	int i;

	while (ms-- > 0)
 160:	20 e0       	ldi	r18, 0x00	; 0
 162:	30 e0       	ldi	r19, 0x00	; 0
	{
		
		for (i = 0; i < 3276; ++i)
			asm("nop");
 164:	00 00       	nop
	int i;

	while (ms-- > 0)
	{
		
		for (i = 0; i < 3276; ++i)
 166:	2f 5f       	subi	r18, 0xFF	; 255
 168:	3f 4f       	sbci	r19, 0xFF	; 255
 16a:	4c e0       	ldi	r20, 0x0C	; 12
 16c:	2c 3c       	cpi	r18, 0xCC	; 204
 16e:	34 07       	cpc	r19, r20
 170:	c9 f7       	brne	.-14     	; 0x164 <delay_ms_lcd+0x6>
 172:	01 97       	sbiw	r24, 0x01	; 1

void delay_ms_lcd(unsigned int ms)
{
	int i;

	while (ms-- > 0)
 174:	00 97       	sbiw	r24, 0x00	; 0
 176:	a1 f7       	brne	.-24     	; 0x160 <delay_ms_lcd+0x2>
	{
		
		for (i = 0; i < 3276; ++i)
			asm("nop");
	}
}
 178:	08 95       	ret

0000017a <lcd_init>:
void lcd_gotoxy(unsigned char row,unsigned char column);
void delay_ms_lcd(unsigned int ms);
void lcd_clear();

void lcd_init(void)	//init the lcd
{	
 17a:	1f 93       	push	r17
  
	DDRB=0x3F;
 17c:	8f e3       	ldi	r24, 0x3F	; 63
 17e:	87 bb       	out	0x17, r24	; 23
	delay_ms_lcd(20);
 180:	84 e1       	ldi	r24, 0x14	; 20
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	ec df       	rcall	.-40     	; 0x15e <delay_ms_lcd>

	
	PORTB=0x03;		
 186:	13 e0       	ldi	r17, 0x03	; 3
 188:	18 bb       	out	0x18, r17	; 24
	latch();
 18a:	7a df       	rcall	.-268    	; 0x80 <latch>
	delay_ms_lcd(5);
 18c:	85 e0       	ldi	r24, 0x05	; 5
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	e6 df       	rcall	.-52     	; 0x15e <delay_ms_lcd>
	PORTB=0x03;
 192:	18 bb       	out	0x18, r17	; 24
	latch();
 194:	75 df       	rcall	.-278    	; 0x80 <latch>
	delay_ms_lcd(1);
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	e1 df       	rcall	.-62     	; 0x15e <delay_ms_lcd>
	PORTB=0x03;
 19c:	18 bb       	out	0x18, r17	; 24
	latch();
 19e:	70 df       	rcall	.-288    	; 0x80 <latch>
	delay_ms_lcd(1);
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	dc df       	rcall	.-72     	; 0x15e <delay_ms_lcd>
	PORTB=0x02;			//Enable 4 bit mode
 1a6:	82 e0       	ldi	r24, 0x02	; 2
 1a8:	88 bb       	out	0x18, r24	; 24
	latch();
 1aa:	6a df       	rcall	.-300    	; 0x80 <latch>
	delay_ms_lcd(5);		
 1ac:	85 e0       	ldi	r24, 0x05	; 5
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	d6 df       	rcall	.-84     	; 0x15e <delay_ms_lcd>
	
  	   
	lcd_cmd(0x28);		//Set interface 4 bit 2 line
 1b2:	88 e2       	ldi	r24, 0x28	; 40
 1b4:	6d df       	rcall	.-294    	; 0x90 <lcd_cmd>
	delay_ms_lcd(1);
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	d1 df       	rcall	.-94     	; 0x15e <delay_ms_lcd>
	
	lcd_cmd(0x08);		//Enable display/cursor
 1bc:	88 e0       	ldi	r24, 0x08	; 8
 1be:	68 df       	rcall	.-304    	; 0x90 <lcd_cmd>
	delay_ms_lcd(1);
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	cc df       	rcall	.-104    	; 0x15e <delay_ms_lcd>
	
	lcd_cmd(0x01);		//clear the display
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	63 df       	rcall	.-314    	; 0x90 <lcd_cmd>
	delay_ms_lcd(1);
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	c7 df       	rcall	.-114    	; 0x15e <delay_ms_lcd>
	
	lcd_cmd(0x06);		//Set cursor move, Move cursor right
 1d0:	86 e0       	ldi	r24, 0x06	; 6
 1d2:	5e df       	rcall	.-324    	; 0x90 <lcd_cmd>
	delay_ms_lcd(1);
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	c2 df       	rcall	.-124    	; 0x15e <delay_ms_lcd>
	   
		
	lcd_cmd(0X0C);		//Turn on display
 1da:	8c e0       	ldi	r24, 0x0C	; 12
 1dc:	59 df       	rcall	.-334    	; 0x90 <lcd_cmd>
	delay_ms_lcd(2);
 1de:	82 e0       	ldi	r24, 0x02	; 2
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	bd df       	rcall	.-134    	; 0x15e <delay_ms_lcd>

}
 1e4:	1f 91       	pop	r17
 1e6:	08 95       	ret

000001e8 <lcd_clear>:
	}
}

void lcd_clear()
{
 lcd_cmd(0x01);
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	52 df       	rcall	.-348    	; 0x90 <lcd_cmd>
}
 1ec:	08 95       	ret

000001ee <main>:
#include<avr/io.h>
#include<util/delay.h>
#include"adc.h"
#include"lcd.h"
void main()
{
 1ee:	0f 93       	push	r16
 1f0:	1f 93       	push	r17
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
lcd_init();
 1f6:	c1 df       	rcall	.-126    	; 0x17a <lcd_init>

unsigned int adcdata,adcdata1;

 void adc_init()
 {
  ADCSRA=0X86;						//ADC enable, ADC interrupt enable, set prescaller to 64
 1f8:	86 e8       	ldi	r24, 0x86	; 134
 1fa:	86 b9       	out	0x06, r24	; 6
  		
 }
 unsigned char getdata(unsigned char chno)	
  {
    ADMUX=0X60;						//right align the ADC result
 1fc:	00 e6       	ldi	r16, 0x60	; 96
 1fe:	ca ef       	ldi	r28, 0xFA	; 250
 200:	d0 e0       	ldi	r29, 0x00	; 0
 202:	07 b9       	out	0x07, r16	; 7
    ADMUX|=chno;					//select the ADC channel
 204:	87 b1       	in	r24, 0x07	; 7
 206:	87 b9       	out	0x07, r24	; 7
    ADCSRA|=0X40;					//start ADC convertion
 208:	36 9a       	sbi	0x06, 6	; 6
 20a:	ce 01       	movw	r24, r28
 20c:	01 97       	sbiw	r24, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <main+0x1e>
    _delay_ms(1);					//give some time delay to complit the aDC convertion
	return ADCH;
 210:	15 b1       	in	r17, 0x05	; 5
adc_init();
while(1)
{
int a=getdata(0);
lcd_gotoxy(0,0);
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	60 e0       	ldi	r22, 0x00	; 0
 216:	97 df       	rcall	.-210    	; 0x146 <lcd_gotoxy>
lcd_showvalue(a);
 218:	81 2f       	mov	r24, r17
 21a:	66 df       	rcall	.-308    	; 0xe8 <lcd_showvalue>
 21c:	f2 cf       	rjmp	.-28     	; 0x202 <main+0x14>

0000021e <__udivmodqi4>:
 21e:	99 1b       	sub	r25, r25
 220:	79 e0       	ldi	r23, 0x09	; 9
 222:	04 c0       	rjmp	.+8      	; 0x22c <__udivmodqi4_ep>

00000224 <__udivmodqi4_loop>:
 224:	99 1f       	adc	r25, r25
 226:	96 17       	cp	r25, r22
 228:	08 f0       	brcs	.+2      	; 0x22c <__udivmodqi4_ep>
 22a:	96 1b       	sub	r25, r22

0000022c <__udivmodqi4_ep>:
 22c:	88 1f       	adc	r24, r24
 22e:	7a 95       	dec	r23
 230:	c9 f7       	brne	.-14     	; 0x224 <__udivmodqi4_loop>
 232:	80 95       	com	r24
 234:	08 95       	ret

00000236 <__divmodhi4>:
 236:	97 fb       	bst	r25, 7
 238:	09 2e       	mov	r0, r25
 23a:	07 26       	eor	r0, r23
 23c:	0a d0       	rcall	.+20     	; 0x252 <__divmodhi4_neg1>
 23e:	77 fd       	sbrc	r23, 7
 240:	04 d0       	rcall	.+8      	; 0x24a <__divmodhi4_neg2>
 242:	0c d0       	rcall	.+24     	; 0x25c <__udivmodhi4>
 244:	06 d0       	rcall	.+12     	; 0x252 <__divmodhi4_neg1>
 246:	00 20       	and	r0, r0
 248:	1a f4       	brpl	.+6      	; 0x250 <__divmodhi4_exit>

0000024a <__divmodhi4_neg2>:
 24a:	70 95       	com	r23
 24c:	61 95       	neg	r22
 24e:	7f 4f       	sbci	r23, 0xFF	; 255

00000250 <__divmodhi4_exit>:
 250:	08 95       	ret

00000252 <__divmodhi4_neg1>:
 252:	f6 f7       	brtc	.-4      	; 0x250 <__divmodhi4_exit>
 254:	90 95       	com	r25
 256:	81 95       	neg	r24
 258:	9f 4f       	sbci	r25, 0xFF	; 255
 25a:	08 95       	ret

0000025c <__udivmodhi4>:
 25c:	aa 1b       	sub	r26, r26
 25e:	bb 1b       	sub	r27, r27
 260:	51 e1       	ldi	r21, 0x11	; 17
 262:	07 c0       	rjmp	.+14     	; 0x272 <__udivmodhi4_ep>

00000264 <__udivmodhi4_loop>:
 264:	aa 1f       	adc	r26, r26
 266:	bb 1f       	adc	r27, r27
 268:	a6 17       	cp	r26, r22
 26a:	b7 07       	cpc	r27, r23
 26c:	10 f0       	brcs	.+4      	; 0x272 <__udivmodhi4_ep>
 26e:	a6 1b       	sub	r26, r22
 270:	b7 0b       	sbc	r27, r23

00000272 <__udivmodhi4_ep>:
 272:	88 1f       	adc	r24, r24
 274:	99 1f       	adc	r25, r25
 276:	5a 95       	dec	r21
 278:	a9 f7       	brne	.-22     	; 0x264 <__udivmodhi4_loop>
 27a:	80 95       	com	r24
 27c:	90 95       	com	r25
 27e:	bc 01       	movw	r22, r24
 280:	cd 01       	movw	r24, r26
 282:	08 95       	ret

00000284 <_exit>:
 284:	f8 94       	cli

00000286 <__stop_program>:
 286:	ff cf       	rjmp	.-2      	; 0x286 <__stop_program>
