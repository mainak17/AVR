
switch_7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000011c  00000190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000192  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000029  00000000  00000000  000001b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001f2  00000000  00000000  000001db  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000119  00000000  00000000  000003cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000019d  00000000  00000000  000004e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000030  00000000  00000000  00000684  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000d1  00000000  00000000  000006b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000088  00000000  00000000  00000785  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec e1       	ldi	r30, 0x1C	; 28
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a2 36       	cpi	r26, 0x62	; 98
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>
  48:	3c d0       	rcall	.+120    	; 0xc2 <main>
  4a:	66 c0       	rjmp	.+204    	; 0x118 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <led>:
void led()
{

unsigned int pin;

if((PINB&0x04)==0x00)
  4e:	b2 99       	sbic	0x16, 2	; 22
  50:	12 c0       	rjmp	.+36     	; 0x76 <led+0x28>
  52:	88 ee       	ldi	r24, 0xE8	; 232
  54:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  56:	20 e9       	ldi	r18, 0x90	; 144
  58:	31 e0       	ldi	r19, 0x01	; 1
  5a:	f9 01       	movw	r30, r18
  5c:	31 97       	sbiw	r30, 0x01	; 1
  5e:	f1 f7       	brne	.-4      	; 0x5c <led+0xe>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  60:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  62:	d9 f7       	brne	.-10     	; 0x5a <led+0xc>
{
_delay_ms(100);
a++;
  64:	80 91 60 00 	lds	r24, 0x0060
  68:	90 91 61 00 	lds	r25, 0x0061
  6c:	01 96       	adiw	r24, 0x01	; 1
  6e:	90 93 61 00 	sts	0x0061, r25
  72:	80 93 60 00 	sts	0x0060, r24
}
if((a%2)==0)
  76:	80 91 60 00 	lds	r24, 0x0060
  7a:	90 91 61 00 	lds	r25, 0x0061
  7e:	80 fd       	sbrc	r24, 0
  80:	03 c0       	rjmp	.+6      	; 0x88 <led+0x3a>
  82:	82 e0       	ldi	r24, 0x02	; 2
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	08 c0       	rjmp	.+16     	; 0x98 <led+0x4a>
{
pin=0x02;
}
else if((a%2)==1)
  88:	62 e0       	ldi	r22, 0x02	; 2
  8a:	70 e0       	ldi	r23, 0x00	; 0
  8c:	1e d0       	rcall	.+60     	; 0xca <__divmodhi4>
  8e:	81 30       	cpi	r24, 0x01	; 1
  90:	91 05       	cpc	r25, r1
  92:	11 f4       	brne	.+4      	; 0x98 <led+0x4a>
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	90 e0       	ldi	r25, 0x00	; 0

pin=0x01;
}


PORTB=pin;
  98:	88 bb       	out	0x18, r24	; 24
  9a:	84 ec       	ldi	r24, 0xC4	; 196
  9c:	99 e0       	ldi	r25, 0x09	; 9
  9e:	20 e9       	ldi	r18, 0x90	; 144
  a0:	31 e0       	ldi	r19, 0x01	; 1
  a2:	f9 01       	movw	r30, r18
  a4:	31 97       	sbiw	r30, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <led+0x56>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  a8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  aa:	d9 f7       	brne	.-10     	; 0xa2 <led+0x54>
_delay_ms(250);
PORTB=0x00;
  ac:	18 ba       	out	0x18, r1	; 24
  ae:	84 ec       	ldi	r24, 0xC4	; 196
  b0:	99 e0       	ldi	r25, 0x09	; 9
  b2:	20 e9       	ldi	r18, 0x90	; 144
  b4:	31 e0       	ldi	r19, 0x01	; 1
  b6:	f9 01       	movw	r30, r18
  b8:	31 97       	sbiw	r30, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <led+0x6a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  bc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  be:	d9 f7       	brne	.-10     	; 0xb6 <led+0x68>
_delay_ms(250);


}
  c0:	08 95       	ret

000000c2 <main>:
#include<util/delay.h>
int a=1;
void main()
{

DDRB = 0x03;
  c2:	83 e0       	ldi	r24, 0x03	; 3
  c4:	87 bb       	out	0x17, r24	; 23
int c;
while(1)
{
led();
  c6:	c3 df       	rcall	.-122    	; 0x4e <led>
  c8:	fe cf       	rjmp	.-4      	; 0xc6 <main+0x4>

000000ca <__divmodhi4>:
  ca:	97 fb       	bst	r25, 7
  cc:	09 2e       	mov	r0, r25
  ce:	07 26       	eor	r0, r23
  d0:	0a d0       	rcall	.+20     	; 0xe6 <__divmodhi4_neg1>
  d2:	77 fd       	sbrc	r23, 7
  d4:	04 d0       	rcall	.+8      	; 0xde <__divmodhi4_neg2>
  d6:	0c d0       	rcall	.+24     	; 0xf0 <__udivmodhi4>
  d8:	06 d0       	rcall	.+12     	; 0xe6 <__divmodhi4_neg1>
  da:	00 20       	and	r0, r0
  dc:	1a f4       	brpl	.+6      	; 0xe4 <__divmodhi4_exit>

000000de <__divmodhi4_neg2>:
  de:	70 95       	com	r23
  e0:	61 95       	neg	r22
  e2:	7f 4f       	sbci	r23, 0xFF	; 255

000000e4 <__divmodhi4_exit>:
  e4:	08 95       	ret

000000e6 <__divmodhi4_neg1>:
  e6:	f6 f7       	brtc	.-4      	; 0xe4 <__divmodhi4_exit>
  e8:	90 95       	com	r25
  ea:	81 95       	neg	r24
  ec:	9f 4f       	sbci	r25, 0xFF	; 255
  ee:	08 95       	ret

000000f0 <__udivmodhi4>:
  f0:	aa 1b       	sub	r26, r26
  f2:	bb 1b       	sub	r27, r27
  f4:	51 e1       	ldi	r21, 0x11	; 17
  f6:	07 c0       	rjmp	.+14     	; 0x106 <__udivmodhi4_ep>

000000f8 <__udivmodhi4_loop>:
  f8:	aa 1f       	adc	r26, r26
  fa:	bb 1f       	adc	r27, r27
  fc:	a6 17       	cp	r26, r22
  fe:	b7 07       	cpc	r27, r23
 100:	10 f0       	brcs	.+4      	; 0x106 <__udivmodhi4_ep>
 102:	a6 1b       	sub	r26, r22
 104:	b7 0b       	sbc	r27, r23

00000106 <__udivmodhi4_ep>:
 106:	88 1f       	adc	r24, r24
 108:	99 1f       	adc	r25, r25
 10a:	5a 95       	dec	r21
 10c:	a9 f7       	brne	.-22     	; 0xf8 <__udivmodhi4_loop>
 10e:	80 95       	com	r24
 110:	90 95       	com	r25
 112:	bc 01       	movw	r22, r24
 114:	cd 01       	movw	r24, r26
 116:	08 95       	ret

00000118 <_exit>:
 118:	f8 94       	cli

0000011a <__stop_program>:
 11a:	ff cf       	rjmp	.-2      	; 0x11a <__stop_program>
