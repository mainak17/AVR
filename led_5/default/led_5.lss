
led_5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000108  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000108  0000019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800062  00800062  0000019e  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000019e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000002f  00000000  00000000  000001be  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001a7  00000000  00000000  000001ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000011b  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001a8  00000000  00000000  000004af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000030  00000000  00000000  00000658  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000cb  00000000  00000000  00000688  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b8  00000000  00000000  00000753  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000080b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 e0       	ldi	r30, 0x08	; 8
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a2 36       	cpi	r26, 0x62	; 98
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a2 e6       	ldi	r26, 0x62	; 98
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a4 36       	cpi	r26, 0x64	; 100
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	38 d0       	rcall	.+112    	; 0xca <main>
  5a:	54 c0       	rjmp	.+168    	; 0x104 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <led>:

}


void led(int a)
{
  5e:	1f 93       	push	r17
	int i;
	for(i=0;i<a;i++)
	{
	PORTB=j;
  60:	60 91 60 00 	lds	r22, 0x0060
  64:	70 91 61 00 	lds	r23, 0x0061
  68:	16 2f       	mov	r17, r22
  6a:	40 e0       	ldi	r20, 0x00	; 0
  6c:	50 e0       	ldi	r21, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  6e:	a0 e9       	ldi	r26, 0x90	; 144
  70:	b1 e0       	ldi	r27, 0x01	; 1
  72:	14 c0       	rjmp	.+40     	; 0x9c <led+0x3e>


void led(int a)
{
	int i;
	for(i=0;i<a;i++)
  74:	18 bb       	out	0x18, r17	; 24
  76:	20 ed       	ldi	r18, 0xD0	; 208
  78:	37 e0       	ldi	r19, 0x07	; 7
  7a:	fd 01       	movw	r30, r26
  7c:	31 97       	sbiw	r30, 0x01	; 1
  7e:	f1 f7       	brne	.-4      	; 0x7c <led+0x1e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  80:	21 50       	subi	r18, 0x01	; 1
  82:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  84:	d1 f7       	brne	.-12     	; 0x7a <led+0x1c>
	{
	PORTB=j;
	_delay_ms(200);
	PORTB=0x00;
  86:	18 ba       	out	0x18, r1	; 24
  88:	20 ed       	ldi	r18, 0xD0	; 208
  8a:	37 e0       	ldi	r19, 0x07	; 7
  8c:	fd 01       	movw	r30, r26
  8e:	31 97       	sbiw	r30, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <led+0x30>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  92:	21 50       	subi	r18, 0x01	; 1
  94:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  96:	d1 f7       	brne	.-12     	; 0x8c <led+0x2e>


void led(int a)
{
	int i;
	for(i=0;i<a;i++)
  98:	4f 5f       	subi	r20, 0xFF	; 255
  9a:	5f 4f       	sbci	r21, 0xFF	; 255
  9c:	48 17       	cp	r20, r24
  9e:	59 07       	cpc	r21, r25
  a0:	4c f3       	brlt	.-46     	; 0x74 <led+0x16>
	_delay_ms(200);
	PORTB=0x00;
	_delay_ms(200);

	}
	if(i==a)
  a2:	48 17       	cp	r20, r24
  a4:	59 07       	cpc	r21, r25
  a6:	31 f4       	brne	.+12     	; 0xb4 <led+0x56>
	j<<=1;
  a8:	66 0f       	add	r22, r22
  aa:	77 1f       	adc	r23, r23
  ac:	70 93 61 00 	sts	0x0061, r23
  b0:	60 93 60 00 	sts	0x0060, r22
	if(i==20)
  b4:	44 31       	cpi	r20, 0x14	; 20
  b6:	51 05       	cpc	r21, r1
  b8:	31 f4       	brne	.+12     	; 0xc6 <led+0x68>
	 j=0x01;
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	90 93 61 00 	sts	0x0061, r25
  c2:	80 93 60 00 	sts	0x0060, r24
}
  c6:	1f 91       	pop	r17
  c8:	08 95       	ret

000000ca <main>:
#include<avr/io.h>
#include<util/delay.h>
unsigned int j=0x01;
int i;
void main()
{
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
	DDRB=0b00001111;
  ce:	8f e0       	ldi	r24, 0x0F	; 15
  d0:	87 bb       	out	0x17, r24	; 23
    
	while(1)
	{
	for(i=5;i<=20;i=i+5)
  d2:	c5 e0       	ldi	r28, 0x05	; 5
  d4:	d0 e0       	ldi	r29, 0x00	; 0
  d6:	d0 93 63 00 	sts	0x0063, r29
  da:	c0 93 62 00 	sts	0x0062, r28
  de:	0a c0       	rjmp	.+20     	; 0xf4 <main+0x2a>
	{
	
	 led(i);
  e0:	be df       	rcall	.-132    	; 0x5e <led>
{
	DDRB=0b00001111;
    
	while(1)
	{
	for(i=5;i<=20;i=i+5)
  e2:	80 91 62 00 	lds	r24, 0x0062
  e6:	90 91 63 00 	lds	r25, 0x0063
  ea:	05 96       	adiw	r24, 0x05	; 5
  ec:	90 93 63 00 	sts	0x0063, r25
  f0:	80 93 62 00 	sts	0x0062, r24
  f4:	80 91 62 00 	lds	r24, 0x0062
  f8:	90 91 63 00 	lds	r25, 0x0063
  fc:	85 31       	cpi	r24, 0x15	; 21
  fe:	91 05       	cpc	r25, r1
 100:	54 f7       	brge	.-44     	; 0xd6 <main+0xc>
 102:	ee cf       	rjmp	.-36     	; 0xe0 <main+0x16>

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>
